
Drivers1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001718  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08001848  08001848  00011848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018a0  080018a0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080018a0  080018a0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018a0  080018a0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018a0  080018a0  000118a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018a4  080018a4  000118a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080018a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  20000018  080018c0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  080018c0  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087c7  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001536  00000000  00000000  00028808  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001970  00000000  00000000  00029d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000003e8  00000000  00000000  0002b6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000340  00000000  00000000  0002ba98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002a0b  00000000  00000000  0002bdd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000454f  00000000  00000000  0002e7e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00012bee  00000000  00000000  00032d32  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00045920  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d10  00000000  00000000  0004599c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000018 	.word	0x20000018
 800014c:	00000000 	.word	0x00000000
 8000150:	08001830 	.word	0x08001830

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000001c 	.word	0x2000001c
 800016c:	08001830 	.word	0x08001830

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <strlen>:
 8000184:	4603      	mov	r3, r0
 8000186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800018a:	2a00      	cmp	r2, #0
 800018c:	d1fb      	bne.n	8000186 <strlen+0x2>
 800018e:	1a18      	subs	r0, r3, r0
 8000190:	3801      	subs	r0, #1
 8000192:	4770      	bx	lr

08000194 <EXTI0_IRQHandler>:
// ISR functions
//-----------------------------


void EXTI0_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<0); //WRITE 1 TO CLEAR
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI0_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI0_IRQHandler+0x1c>)
 800019e:	f043 0301 	orr.w	r3, r3, #1
 80001a2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI0_IRQHandler+0x20>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000040 	.word	0x20000040

080001b8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<1); //WRITE 1 TO CLEAR
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI1_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI1_IRQHandler+0x1c>)
 80001c2:	f043 0302 	orr.w	r3, r3, #2
 80001c6:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI1_IRQHandler+0x20>)
 80001ca:	685b      	ldr	r3, [r3, #4]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000040 	.word	0x20000040

080001dc <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<2); //WRITE 1 TO CLEAR
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI2_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI2_IRQHandler+0x1c>)
 80001e6:	f043 0304 	orr.w	r3, r3, #4
 80001ea:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI2_IRQHandler+0x20>)
 80001ee:	689b      	ldr	r3, [r3, #8]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000040 	.word	0x20000040

08000200 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<3); //WRITE 1 TO CLEAR
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI3_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI3_IRQHandler+0x1c>)
 800020a:	f043 0308 	orr.w	r3, r3, #8
 800020e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI3_IRQHandler+0x20>)
 8000212:	68db      	ldr	r3, [r3, #12]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000040 	.word	0x20000040

08000224 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1<<4); //WRITE 1 TO CLEAR
 8000228:	4b05      	ldr	r3, [pc, #20]	; (8000240 <EXTI4_IRQHandler+0x1c>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <EXTI4_IRQHandler+0x1c>)
 800022e:	f043 0310 	orr.w	r3, r3, #16
 8000232:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000234:	4b03      	ldr	r3, [pc, #12]	; (8000244 <EXTI4_IRQHandler+0x20>)
 8000236:	691b      	ldr	r3, [r3, #16]
 8000238:	4798      	blx	r3
}
 800023a:	bf00      	nop
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	40010400 	.word	0x40010400
 8000244:	20000040 	.word	0x20000040

08000248 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	if( EXTI->EXTI_PR & (1<<5))
 800024c:	4b26      	ldr	r3, [pc, #152]	; (80002e8 <EXTI9_5_IRQHandler+0xa0>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	f003 0320 	and.w	r3, r3, #32
 8000254:	2b00      	cmp	r3, #0
 8000256:	d008      	beq.n	800026a <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->EXTI_PR |= (1<<5); //WRITE 1 TO CLEAR
 8000258:	4b23      	ldr	r3, [pc, #140]	; (80002e8 <EXTI9_5_IRQHandler+0xa0>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	4a22      	ldr	r2, [pc, #136]	; (80002e8 <EXTI9_5_IRQHandler+0xa0>)
 800025e:	f043 0320 	orr.w	r3, r3, #32
 8000262:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[5]();
 8000264:	4b21      	ldr	r3, [pc, #132]	; (80002ec <EXTI9_5_IRQHandler+0xa4>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<6))
 800026a:	4b1f      	ldr	r3, [pc, #124]	; (80002e8 <EXTI9_5_IRQHandler+0xa0>)
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000272:	2b00      	cmp	r3, #0
 8000274:	d008      	beq.n	8000288 <EXTI9_5_IRQHandler+0x40>
	{
		EXTI->EXTI_PR |= (1<<6); //WRITE 1 TO CLEAR
 8000276:	4b1c      	ldr	r3, [pc, #112]	; (80002e8 <EXTI9_5_IRQHandler+0xa0>)
 8000278:	695b      	ldr	r3, [r3, #20]
 800027a:	4a1b      	ldr	r2, [pc, #108]	; (80002e8 <EXTI9_5_IRQHandler+0xa0>)
 800027c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000280:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[6]();
 8000282:	4b1a      	ldr	r3, [pc, #104]	; (80002ec <EXTI9_5_IRQHandler+0xa4>)
 8000284:	699b      	ldr	r3, [r3, #24]
 8000286:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<7))
 8000288:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <EXTI9_5_IRQHandler+0xa0>)
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000290:	2b00      	cmp	r3, #0
 8000292:	d008      	beq.n	80002a6 <EXTI9_5_IRQHandler+0x5e>
	{
		EXTI->EXTI_PR |= (1<<7); //WRITE 1 TO CLEAR
 8000294:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <EXTI9_5_IRQHandler+0xa0>)
 8000296:	695b      	ldr	r3, [r3, #20]
 8000298:	4a13      	ldr	r2, [pc, #76]	; (80002e8 <EXTI9_5_IRQHandler+0xa0>)
 800029a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800029e:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[7]();
 80002a0:	4b12      	ldr	r3, [pc, #72]	; (80002ec <EXTI9_5_IRQHandler+0xa4>)
 80002a2:	69db      	ldr	r3, [r3, #28]
 80002a4:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<8))
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <EXTI9_5_IRQHandler+0xa0>)
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d008      	beq.n	80002c4 <EXTI9_5_IRQHandler+0x7c>
	{
		EXTI->EXTI_PR |= (1<<8); //WRITE 1 TO CLEAR
 80002b2:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <EXTI9_5_IRQHandler+0xa0>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	4a0c      	ldr	r2, [pc, #48]	; (80002e8 <EXTI9_5_IRQHandler+0xa0>)
 80002b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002bc:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[8]();
 80002be:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <EXTI9_5_IRQHandler+0xa4>)
 80002c0:	6a1b      	ldr	r3, [r3, #32]
 80002c2:	4798      	blx	r3
	}
	if( EXTI->EXTI_PR & (1<<9))
 80002c4:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <EXTI9_5_IRQHandler+0xa0>)
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d008      	beq.n	80002e2 <EXTI9_5_IRQHandler+0x9a>
	{
		EXTI->EXTI_PR |= (1<<9); //WRITE 1 TO CLEAR
 80002d0:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <EXTI9_5_IRQHandler+0xa0>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <EXTI9_5_IRQHandler+0xa0>)
 80002d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002da:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[9]();
 80002dc:	4b03      	ldr	r3, [pc, #12]	; (80002ec <EXTI9_5_IRQHandler+0xa4>)
 80002de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002e0:	4798      	blx	r3
	}
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40010400 	.word	0x40010400
 80002ec:	20000040 	.word	0x20000040

080002f0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	if( EXTI->EXTI_PR & (1<<10))
 80002f4:	4b30      	ldr	r3, [pc, #192]	; (80003b8 <EXTI15_10_IRQHandler+0xc8>)
 80002f6:	695b      	ldr	r3, [r3, #20]
 80002f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d009      	beq.n	8000314 <EXTI15_10_IRQHandler+0x24>
	{
		EXTI->EXTI_PR |= (1<<10); //WRITE 1 TO CLEAR
 8000300:	4b2d      	ldr	r3, [pc, #180]	; (80003b8 <EXTI15_10_IRQHandler+0xc8>)
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	4a2c      	ldr	r2, [pc, #176]	; (80003b8 <EXTI15_10_IRQHandler+0xc8>)
 8000306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800030a:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[10]();
 800030c:	4b2b      	ldr	r3, [pc, #172]	; (80003bc <EXTI15_10_IRQHandler+0xcc>)
 800030e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000310:	4798      	blx	r3
		EXTI->EXTI_PR |= (1<<15); //WRITE 1 TO CLEAR
		GP_IRQ_CallBack[15]();
	}


}
 8000312:	e04e      	b.n	80003b2 <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<11))
 8000314:	4b28      	ldr	r3, [pc, #160]	; (80003b8 <EXTI15_10_IRQHandler+0xc8>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800031c:	2b00      	cmp	r3, #0
 800031e:	d009      	beq.n	8000334 <EXTI15_10_IRQHandler+0x44>
		EXTI->EXTI_PR |= (1<<11); //WRITE 1 TO CLEAR
 8000320:	4b25      	ldr	r3, [pc, #148]	; (80003b8 <EXTI15_10_IRQHandler+0xc8>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	4a24      	ldr	r2, [pc, #144]	; (80003b8 <EXTI15_10_IRQHandler+0xc8>)
 8000326:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800032a:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[11]();
 800032c:	4b23      	ldr	r3, [pc, #140]	; (80003bc <EXTI15_10_IRQHandler+0xcc>)
 800032e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000330:	4798      	blx	r3
}
 8000332:	e03e      	b.n	80003b2 <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<12))
 8000334:	4b20      	ldr	r3, [pc, #128]	; (80003b8 <EXTI15_10_IRQHandler+0xc8>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800033c:	2b00      	cmp	r3, #0
 800033e:	d009      	beq.n	8000354 <EXTI15_10_IRQHandler+0x64>
		EXTI->EXTI_PR |= (1<<12); //WRITE 1 TO CLEAR
 8000340:	4b1d      	ldr	r3, [pc, #116]	; (80003b8 <EXTI15_10_IRQHandler+0xc8>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	4a1c      	ldr	r2, [pc, #112]	; (80003b8 <EXTI15_10_IRQHandler+0xc8>)
 8000346:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800034a:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[12]();
 800034c:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <EXTI15_10_IRQHandler+0xcc>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4798      	blx	r3
}
 8000352:	e02e      	b.n	80003b2 <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<13))
 8000354:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <EXTI15_10_IRQHandler+0xc8>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800035c:	2b00      	cmp	r3, #0
 800035e:	d009      	beq.n	8000374 <EXTI15_10_IRQHandler+0x84>
		EXTI->EXTI_PR |= (1<<13); //WRITE 1 TO CLEAR
 8000360:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <EXTI15_10_IRQHandler+0xc8>)
 8000362:	695b      	ldr	r3, [r3, #20]
 8000364:	4a14      	ldr	r2, [pc, #80]	; (80003b8 <EXTI15_10_IRQHandler+0xc8>)
 8000366:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800036a:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[13]();
 800036c:	4b13      	ldr	r3, [pc, #76]	; (80003bc <EXTI15_10_IRQHandler+0xcc>)
 800036e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000370:	4798      	blx	r3
}
 8000372:	e01e      	b.n	80003b2 <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<14))
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <EXTI15_10_IRQHandler+0xc8>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800037c:	2b00      	cmp	r3, #0
 800037e:	d009      	beq.n	8000394 <EXTI15_10_IRQHandler+0xa4>
		EXTI->EXTI_PR |= (1<<14); //WRITE 1 TO CLEAR
 8000380:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <EXTI15_10_IRQHandler+0xc8>)
 8000382:	695b      	ldr	r3, [r3, #20]
 8000384:	4a0c      	ldr	r2, [pc, #48]	; (80003b8 <EXTI15_10_IRQHandler+0xc8>)
 8000386:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800038a:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[14]();
 800038c:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <EXTI15_10_IRQHandler+0xcc>)
 800038e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000390:	4798      	blx	r3
}
 8000392:	e00e      	b.n	80003b2 <EXTI15_10_IRQHandler+0xc2>
	else if( EXTI->EXTI_PR & (1<<15))
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <EXTI15_10_IRQHandler+0xc8>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800039c:	2b00      	cmp	r3, #0
 800039e:	d008      	beq.n	80003b2 <EXTI15_10_IRQHandler+0xc2>
		EXTI->EXTI_PR |= (1<<15); //WRITE 1 TO CLEAR
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <EXTI15_10_IRQHandler+0xc8>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <EXTI15_10_IRQHandler+0xc8>)
 80003a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003aa:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[15]();
 80003ac:	4b03      	ldr	r3, [pc, #12]	; (80003bc <EXTI15_10_IRQHandler+0xcc>)
 80003ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003b0:	4798      	blx	r3
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40010400 	.word	0x40010400
 80003bc:	20000040 	.word	0x20000040

080003c0 <get_CRLH_position>:
 *  ENG-TERA
 */
#include "GPIO_DRIVER.h"


int get_CRLH_position(uint32_t pin_num){
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]

	switch(pin_num)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2b0f      	cmp	r3, #15
 80003cc:	d842      	bhi.n	8000454 <get_CRLH_position+0x94>
 80003ce:	a201      	add	r2, pc, #4	; (adr r2, 80003d4 <get_CRLH_position+0x14>)
 80003d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d4:	08000415 	.word	0x08000415
 80003d8:	08000419 	.word	0x08000419
 80003dc:	0800041d 	.word	0x0800041d
 80003e0:	08000421 	.word	0x08000421
 80003e4:	08000425 	.word	0x08000425
 80003e8:	08000429 	.word	0x08000429
 80003ec:	0800042d 	.word	0x0800042d
 80003f0:	08000431 	.word	0x08000431
 80003f4:	08000435 	.word	0x08000435
 80003f8:	08000439 	.word	0x08000439
 80003fc:	0800043d 	.word	0x0800043d
 8000400:	08000441 	.word	0x08000441
 8000404:	08000445 	.word	0x08000445
 8000408:	08000449 	.word	0x08000449
 800040c:	0800044d 	.word	0x0800044d
 8000410:	08000451 	.word	0x08000451
	{
	case 0:
		return 0;
 8000414:	2300      	movs	r3, #0
 8000416:	e01e      	b.n	8000456 <get_CRLH_position+0x96>
	case 1:
		return 4;
 8000418:	2304      	movs	r3, #4
 800041a:	e01c      	b.n	8000456 <get_CRLH_position+0x96>
	case 2:
		return 8;
 800041c:	2308      	movs	r3, #8
 800041e:	e01a      	b.n	8000456 <get_CRLH_position+0x96>
	case 3:
		return 12;
 8000420:	230c      	movs	r3, #12
 8000422:	e018      	b.n	8000456 <get_CRLH_position+0x96>
	case 4:
		return 16;
 8000424:	2310      	movs	r3, #16
 8000426:	e016      	b.n	8000456 <get_CRLH_position+0x96>
	case 5:
		return 20;
 8000428:	2314      	movs	r3, #20
 800042a:	e014      	b.n	8000456 <get_CRLH_position+0x96>
	case 6:
		return 24;
 800042c:	2318      	movs	r3, #24
 800042e:	e012      	b.n	8000456 <get_CRLH_position+0x96>
	case 7:
		return 28;
 8000430:	231c      	movs	r3, #28
 8000432:	e010      	b.n	8000456 <get_CRLH_position+0x96>
	case 8:
		return 0;
 8000434:	2300      	movs	r3, #0
 8000436:	e00e      	b.n	8000456 <get_CRLH_position+0x96>
	case 9:
		return 4;
 8000438:	2304      	movs	r3, #4
 800043a:	e00c      	b.n	8000456 <get_CRLH_position+0x96>
	case 10:
		return 8;
 800043c:	2308      	movs	r3, #8
 800043e:	e00a      	b.n	8000456 <get_CRLH_position+0x96>
	case 11:
		return 12;
 8000440:	230c      	movs	r3, #12
 8000442:	e008      	b.n	8000456 <get_CRLH_position+0x96>
	case 12:
		return 16;
 8000444:	2310      	movs	r3, #16
 8000446:	e006      	b.n	8000456 <get_CRLH_position+0x96>
	case 13:
		return 20;
 8000448:	2314      	movs	r3, #20
 800044a:	e004      	b.n	8000456 <get_CRLH_position+0x96>
	case 14:
		return 24;
 800044c:	2318      	movs	r3, #24
 800044e:	e002      	b.n	8000456 <get_CRLH_position+0x96>
	case 15:
		return 28;
 8000450:	231c      	movs	r3, #28
 8000452:	e000      	b.n	8000456 <get_CRLH_position+0x96>
	}
	return 0;
 8000454:	2300      	movs	r3, #0

}
 8000456:	4618      	mov	r0, r3
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <MCAL_GPIO_Init>:
 * @param [in]	-Pin_config_s: Is a pointer to the structure that contains the information of the pin we want to configure
 * @retval		-none
 * Note			-In Our package LQFP48 we have only GPIOA and GPIOB
 */

void MCAL_GPIO_Init(GPIO_REGISTERS_t *GPIOx, Pin_Config_t * Pin_config_s){
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]

	volatile uint32_t *configRegister = NULL;
 800046a:	2300      	movs	r3, #0
 800046c:	60bb      	str	r3, [r7, #8]
	uint32_t pinConfig = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]

	configRegister = (Pin_config_s->Pin_Num < 8)? &GPIOx->GPIOx_CRL : &GPIOx->GPIOx_CRH;
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	2b07      	cmp	r3, #7
 8000478:	d801      	bhi.n	800047e <MCAL_GPIO_Init+0x1e>
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	e001      	b.n	8000482 <MCAL_GPIO_Init+0x22>
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	3304      	adds	r3, #4
 8000482:	60bb      	str	r3, [r7, #8]
	(*configRegister) &= ~(0x000F << get_CRLH_position(Pin_config_s->Pin_Num));
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff ff99 	bl	80003c0 <get_CRLH_position>
 800048e:	4602      	mov	r2, r0
 8000490:	230f      	movs	r3, #15
 8000492:	4093      	lsls	r3, r2
 8000494:	43da      	mvns	r2, r3
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	401a      	ands	r2, r3
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	601a      	str	r2, [r3, #0]

	/* IF OUTPUT */

	if( (Pin_config_s->mode == Output_ALF_Push_pull) || (Pin_config_s->mode == Output_ALF_Open_drain) || (Pin_config_s->mode == Output_Open_drain) || (Pin_config_s->mode == Output_Push_pull) )
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	2b06      	cmp	r3, #6
 80004a6:	d00b      	beq.n	80004c0 <MCAL_GPIO_Init+0x60>
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	2b07      	cmp	r3, #7
 80004ae:	d007      	beq.n	80004c0 <MCAL_GPIO_Init+0x60>
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	2b05      	cmp	r3, #5
 80004b6:	d003      	beq.n	80004c0 <MCAL_GPIO_Init+0x60>
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	2b04      	cmp	r3, #4
 80004be:	d10a      	bne.n	80004d6 <MCAL_GPIO_Init+0x76>
	{
		pinConfig = ( ( ( (Pin_config_s->mode - 4 )<< 2 ) | (Pin_config_s->Speed_Output) ) & 0x0F );
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	3b04      	subs	r3, #4
 80004c6:	009a      	lsls	r2, r3, #2
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	4313      	orrs	r3, r2
 80004ce:	f003 030f 	and.w	r3, r3, #15
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	e031      	b.n	800053a <MCAL_GPIO_Init+0xda>
	}

	else // IF INPUT
	{
		if( (Pin_config_s->mode == Input_Analog) || (Pin_config_s ->mode == Input_floating) )
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d003      	beq.n	80004e6 <MCAL_GPIO_Init+0x86>
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d106      	bne.n	80004f4 <MCAL_GPIO_Init+0x94>
		{
			pinConfig =( ( (Pin_config_s->mode << 2) | 0x00 ) & 0x0F );
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	f003 030f 	and.w	r3, r3, #15
 80004f0:	60fb      	str	r3, [r7, #12]
 80004f2:	e022      	b.n	800053a <MCAL_GPIO_Init+0xda>
		}
		else if(Pin_config_s->mode == Input_AF)
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	2b08      	cmp	r3, #8
 80004fa:	d102      	bne.n	8000502 <MCAL_GPIO_Init+0xa2>
		{
			pinConfig =( ( (Input_floating << 2 ) | 0x00 ) & 0x0F );
 80004fc:	2304      	movs	r3, #4
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	e01b      	b.n	800053a <MCAL_GPIO_Init+0xda>
		}
		else // IF INPUT PULLUP\PULLDOWN
		{
			pinConfig = ( ( (Input_PullUp << 2 ) | 0x00 ) & 0x0F );
 8000502:	2308      	movs	r3, #8
 8000504:	60fb      	str	r3, [r7, #12]
			if(Pin_config_s->mode == Input_PullUp) // IF PULL UP
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	2b02      	cmp	r3, #2
 800050c:	d10a      	bne.n	8000524 <MCAL_GPIO_Init+0xc4>
			{
				GPIOx->GPIOx_ODR |= (1<<Pin_config_s->Pin_Num) ;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	683a      	ldr	r2, [r7, #0]
 8000514:	6812      	ldr	r2, [r2, #0]
 8000516:	2101      	movs	r1, #1
 8000518:	fa01 f202 	lsl.w	r2, r1, r2
 800051c:	431a      	orrs	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	e00a      	b.n	800053a <MCAL_GPIO_Init+0xda>
			}
			else // IF PULL DOWN
			{
				GPIOx->GPIOx_ODR &= ~(1<<Pin_config_s->Pin_Num) ;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	683a      	ldr	r2, [r7, #0]
 800052a:	6812      	ldr	r2, [r2, #0]
 800052c:	2101      	movs	r1, #1
 800052e:	fa01 f202 	lsl.w	r2, r1, r2
 8000532:	43d2      	mvns	r2, r2
 8000534:	401a      	ands	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	60da      	str	r2, [r3, #12]

			}
		}
	}
	(*configRegister) |=( (pinConfig) << get_CRLH_position(Pin_config_s->Pin_Num) );
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff ff3e 	bl	80003c0 <get_CRLH_position>
 8000544:	4602      	mov	r2, r0
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	fa03 f202 	lsl.w	r2, r3, r2
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	431a      	orrs	r2, r3
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	601a      	str	r2, [r3, #0]
}
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <MCAL_GPIO_WritePin>:
 * @param [in]	-Value: 1 for output high or 0 for output low
 * @param [in]	-Pin_Num: Variable contains the output pin number
 * @retval		-None
 * Note			-None
 */
void MCAL_GPIO_WritePin(GPIO_REGISTERS_t *GPIOx,uint32_t Pin_Num,uint32_t Value){
 800055e:	b480      	push	{r7}
 8000560:	b085      	sub	sp, #20
 8000562:	af00      	add	r7, sp, #0
 8000564:	60f8      	str	r0, [r7, #12]
 8000566:	60b9      	str	r1, [r7, #8]
 8000568:	607a      	str	r2, [r7, #4]

GPIOx->GPIOx_ODR &= ~(1<<Pin_Num);
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	2101      	movs	r1, #1
 8000570:	68ba      	ldr	r2, [r7, #8]
 8000572:	fa01 f202 	lsl.w	r2, r1, r2
 8000576:	43d2      	mvns	r2, r2
 8000578:	401a      	ands	r2, r3
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	60da      	str	r2, [r3, #12]
GPIOx->GPIOx_ODR |= (Value<<Pin_Num);
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	68da      	ldr	r2, [r3, #12]
 8000582:	6879      	ldr	r1, [r7, #4]
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	fa01 f303 	lsl.w	r3, r1, r3
 800058a:	431a      	orrs	r2, r3
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	60da      	str	r2, [r3, #12]

}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <MCAL_GPIO_TogglePin>:
 * @param [in]	-GPIOx: Where x could be from A >> E depending on the Package
 * @param [in]	-Pin_Num:Variable contains the output pin number
 * @retval		-The value of data which the input port contain
 * Note			-None
 */
void MCAL_GPIO_TogglePin(GPIO_REGISTERS_t *GPIOx,uint8_t Pin_Num){
 800059a:	b480      	push	{r7}
 800059c:	b083      	sub	sp, #12
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
 80005a2:	460b      	mov	r3, r1
 80005a4:	70fb      	strb	r3, [r7, #3]

	GPIOx->GPIOx_ODR ^= (1<<Pin_Num);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	78fa      	ldrb	r2, [r7, #3]
 80005ac:	2101      	movs	r1, #1
 80005ae:	fa01 f202 	lsl.w	r2, r1, r2
 80005b2:	405a      	eors	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	60da      	str	r2, [r3, #12]

}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <I2C1_ER_IRQHandler>:
 * ======================================================================================================================
 */

//Not supported
void I2C1_ER_IRQHandler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0


}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0

}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr

080005da <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0


}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr

080005e6 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0

}
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
	...

080005f4 <RCC_Get_SYSCLK>:
#include "RCC_DRIVER.h"
uint8_t AHB_Prescaler[] = {0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8};
uint8_t APB2_Prescaler[] = {0,0,0,0,1,2,3,4};


uint32_t RCC_Get_SYSCLK(void){
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0

	int x;
	x = ( (RCC->RCC_CFGR)  & (0b11 << 2) ) >> 2;
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <RCC_Get_SYSCLK+0x38>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	089b      	lsrs	r3, r3, #2
 8000600:	f003 0303 	and.w	r3, r3, #3
 8000604:	607b      	str	r3, [r7, #4]
	switch (x)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d005      	beq.n	8000618 <RCC_Get_SYSCLK+0x24>
 800060c:	2b02      	cmp	r3, #2
 800060e:	d005      	beq.n	800061c <RCC_Get_SYSCLK+0x28>
 8000610:	2b00      	cmp	r3, #0
 8000612:	d105      	bne.n	8000620 <RCC_Get_SYSCLK+0x2c>
	{
	case 0:
		return HSI;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <RCC_Get_SYSCLK+0x3c>)
 8000616:	e004      	b.n	8000622 <RCC_Get_SYSCLK+0x2e>
		break;
	case 1:
		return HSE;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <RCC_Get_SYSCLK+0x40>)
 800061a:	e002      	b.n	8000622 <RCC_Get_SYSCLK+0x2e>
		break;
	case 2:
		return PLL;
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <RCC_Get_SYSCLK+0x40>)
 800061e:	e000      	b.n	8000622 <RCC_Get_SYSCLK+0x2e>
		break;
	}
return 0;
 8000620:	2300      	movs	r3, #0

}
 8000622:	4618      	mov	r0, r3
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	40021000 	.word	0x40021000
 8000630:	007a1200 	.word	0x007a1200
 8000634:	00f42400 	.word	0x00f42400

08000638 <RCC_Get_HCLK>:
uint32_t RCC_Get_HCLK(void){
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0

	return RCC_Get_SYSCLK() >> AHB_Prescaler[ ( (RCC->RCC_CFGR) & (0b111 << 4) ) >> 4 ];
 800063c:	f7ff ffda 	bl	80005f4 <RCC_Get_SYSCLK>
 8000640:	4601      	mov	r1, r0
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <RCC_Get_HCLK+0x20>)
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	091b      	lsrs	r3, r3, #4
 8000648:	f003 0307 	and.w	r3, r3, #7
 800064c:	4a03      	ldr	r2, [pc, #12]	; (800065c <RCC_Get_HCLK+0x24>)
 800064e:	5cd3      	ldrb	r3, [r2, r3]
 8000650:	fa21 f303 	lsr.w	r3, r1, r3


}
 8000654:	4618      	mov	r0, r3
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40021000 	.word	0x40021000
 800065c:	20000000 	.word	0x20000000

08000660 <RCC_Get_PCLK2>:
uint32_t RCC_Get_PCLK2(void){
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0

	return RCC_Get_HCLK() >> APB2_Prescaler[ ( (RCC->RCC_CFGR) & (0b111 << 11) ) >> 11 ];
 8000664:	f7ff ffe8 	bl	8000638 <RCC_Get_HCLK>
 8000668:	4601      	mov	r1, r0
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <RCC_Get_PCLK2+0x20>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	0adb      	lsrs	r3, r3, #11
 8000670:	f003 0307 	and.w	r3, r3, #7
 8000674:	4a03      	ldr	r2, [pc, #12]	; (8000684 <RCC_Get_PCLK2+0x24>)
 8000676:	5cd3      	ldrb	r3, [r2, r3]
 8000678:	fa21 f303 	lsr.w	r3, r1, r3

}
 800067c:	4618      	mov	r0, r3
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021000 	.word	0x40021000
 8000684:	20000010 	.word	0x20000010

08000688 <SPI1_IRQHandler>:
//------------------<< ISR >>--------------------
//-----------------------------------------------


void SPI1_IRQHandler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
	Interrupt_flags_bits_t IRQ;
	IRQ.Receive_buffer_not_empty_flag = ( ( SPI1->SPI_SR & (1<<0) ) >> 0 );
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <SPI1_IRQHandler+0x40>)
 8000690:	689b      	ldr	r3, [r3, #8]
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	b2da      	uxtb	r2, r3
 8000698:	793b      	ldrb	r3, [r7, #4]
 800069a:	f362 0300 	bfi	r3, r2, #0, #1
 800069e:	713b      	strb	r3, [r7, #4]
	IRQ.Transmit_buffer_empty_flag = ( ( SPI1->SPI_SR & (1<<1) ) >> 1 );
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <SPI1_IRQHandler+0x40>)
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	085b      	lsrs	r3, r3, #1
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	793b      	ldrb	r3, [r7, #4]
 80006ae:	f362 0341 	bfi	r3, r2, #1, #1
 80006b2:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config_s->CallBack_PTR (&IRQ);
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <SPI1_IRQHandler+0x44>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	1d3a      	adds	r2, r7, #4
 80006bc:	4610      	mov	r0, r2
 80006be:	4798      	blx	r3



}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40013000 	.word	0x40013000
 80006cc:	2000007c 	.word	0x2000007c

080006d0 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	Interrupt_flags_bits_t IRQ;
	IRQ.Receive_buffer_not_empty_flag = ( ( SPI2->SPI_SR & (1<<0) ) >> 0 );
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <SPI2_IRQHandler+0x40>)
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	793b      	ldrb	r3, [r7, #4]
 80006e2:	f362 0300 	bfi	r3, r2, #0, #1
 80006e6:	713b      	strb	r3, [r7, #4]
	IRQ.Transmit_buffer_empty_flag = ( ( SPI2->SPI_SR & (1<<1) ) >> 1 );
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <SPI2_IRQHandler+0x40>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	085b      	lsrs	r3, r3, #1
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	793b      	ldrb	r3, [r7, #4]
 80006f6:	f362 0341 	bfi	r3, r2, #1, #1
 80006fa:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config_s->CallBack_PTR (&IRQ);
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <SPI2_IRQHandler+0x44>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	1d3a      	adds	r2, r7, #4
 8000704:	4610      	mov	r0, r2
 8000706:	4798      	blx	r3

}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40003800 	.word	0x40003800
 8000714:	2000007c 	.word	0x2000007c

08000718 <MCAL_USART_Init>:
 * @param [in] 	-USARTx: Where x could be 1 or 2 or 3 depending on the Package
 * @param [in]	-USART_Config_s: Is a pointer to the structure that contains the information of the SPI we want to configure
 * @retval		-none
 * Note			-In Our package LQFP48 we have only USART1 and USART2
 */
void    MCAL_USART_Init(USART_REGISTERS_t * USARTx,USART_Config_t * USART_Config_s){
 8000718:	b5b0      	push	{r4, r5, r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]

	Global_USART_Config_s = USART_Config_s;
 8000722:	4a62      	ldr	r2, [pc, #392]	; (80008ac <MCAL_USART_Init+0x194>)
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	6013      	str	r3, [r2, #0]

	if(USART_Config_s->Sync_EN == USART_Enable)
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	785b      	ldrb	r3, [r3, #1]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d106      	bne.n	800073e <MCAL_USART_Init+0x26>
	{
		// 1- Bit 11 CLKEN: Clock enable

		USARTx->USART_CR2 |= (1<<11);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	691b      	ldr	r3, [r3, #16]
 8000734:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	611a      	str	r2, [r3, #16]
 800073c:	e05e      	b.n	80007fc <MCAL_USART_Init+0xe4>

	}
	else if(USART_Config_s->Async_EN == USART_Enable)
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d15a      	bne.n	80007fc <MCAL_USART_Init+0xe4>
	{

		// 1- USART ENABLE
		USARTx->USART_CR1 |= (1<<13);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	68db      	ldr	r3, [r3, #12]
 800074a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	60da      	str	r2, [r3, #12]

		// 2- TX and RX ENABLE

		USARTx->USART_CR1 |= ( (1<<2) | (1<<3) );
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	f043 020c 	orr.w	r2, r3, #12
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	60da      	str	r2, [r3, #12]

		// 3- Program the M bit in USART_CR1 to define the word length.

		USARTx->USART_CR1 |= USART_Config_s->Async_Config_s.Word_Length;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	683a      	ldr	r2, [r7, #0]
 8000764:	7912      	ldrb	r2, [r2, #4]
 8000766:	431a      	orrs	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	60da      	str	r2, [r3, #12]

		// 4- Program the number of stop bits in USART_CR2.

		USARTx->USART_CR2 |= USART_Config_s->Async_Config_s.Stop_Bits;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	691b      	ldr	r3, [r3, #16]
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	7952      	ldrb	r2, [r2, #5]
 8000774:	431a      	orrs	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	611a      	str	r2, [r3, #16]

		// 5 - Select the desired baud rate using the USART_BRR register.

		USARTx->USART_BRR |= USART_BRR_Register(RCC_Get_PCLK2(),USART_Config_s->Async_Config_s.Baud_Rate);
 800077a:	f7ff ff71 	bl	8000660 <RCC_Get_PCLK2>
 800077e:	4602      	mov	r2, r0
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	fbb2 f3f3 	udiv	r3, r2, r3
 800078a:	011c      	lsls	r4, r3, #4
 800078c:	f7ff ff68 	bl	8000660 <RCC_Get_PCLK2>
 8000790:	4602      	mov	r2, r0
 8000792:	4613      	mov	r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	4413      	add	r3, r2
 8000798:	009a      	lsls	r2, r3, #2
 800079a:	441a      	add	r2, r3
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	fbb2 f5f3 	udiv	r5, r2, r3
 80007a6:	f7ff ff5b 	bl	8000660 <RCC_Get_PCLK2>
 80007aa:	4602      	mov	r2, r0
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	011b      	lsls	r3, r3, #4
 80007b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b6:	2264      	movs	r2, #100	; 0x64
 80007b8:	fb02 f303 	mul.w	r3, r2, r3
 80007bc:	1aeb      	subs	r3, r5, r3
 80007be:	011b      	lsls	r3, r3, #4
 80007c0:	4a3b      	ldr	r2, [pc, #236]	; (80008b0 <MCAL_USART_Init+0x198>)
 80007c2:	fba2 2303 	umull	r2, r3, r2, r3
 80007c6:	095b      	lsrs	r3, r3, #5
 80007c8:	f003 030f 	and.w	r3, r3, #15
 80007cc:	ea44 0203 	orr.w	r2, r4, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	431a      	orrs	r2, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	609a      	str	r2, [r3, #8]

		// 6 - Set Parity Configurations

		if(USART_Config_s->Async_Config_s.Parity.Parity_Enable == USART_Enable)
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	7b1b      	ldrb	r3, [r3, #12]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d10c      	bne.n	80007fc <MCAL_USART_Init+0xe4>
		{

			USARTx->USART_CR1 |= (1<<10);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	60da      	str	r2, [r3, #12]
			USARTx->USART_CR1 |= USART_Config_s->Async_Config_s.Parity.Parity_Even_Odd;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	7b52      	ldrb	r2, [r2, #13]
 80007f6:	431a      	orrs	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	60da      	str	r2, [r3, #12]
		}
	}

	if( (USART_Config_s->interrupts_CNFG.TX_Interrupt_Enable_Or_Disable) == USART_Enable )
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	7c1b      	ldrb	r3, [r3, #16]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d108      	bne.n	8000816 <MCAL_USART_Init+0xfe>
	{
		USARTx->USART_CR1 |= (1<<7);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	60da      	str	r2, [r3, #12]
		TX_flag1 =1;
 8000810:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <MCAL_USART_Init+0x19c>)
 8000812:	2201      	movs	r2, #1
 8000814:	701a      	strb	r2, [r3, #0]
	}
	if( (USART_Config_s->interrupts_CNFG.RX_Interrupt_Enable_Or_Disable) == USART_Enable )
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	7c5b      	ldrb	r3, [r3, #17]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d108      	bne.n	8000830 <MCAL_USART_Init+0x118>
	{
		USARTx->USART_CR1 |= (1<<5);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	f043 0220 	orr.w	r2, r3, #32
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	60da      	str	r2, [r3, #12]
		RX_flag2=1;
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <MCAL_USART_Init+0x1a0>)
 800082c:	2201      	movs	r2, #1
 800082e:	701a      	strb	r2, [r3, #0]
	}
	if( (USART_Config_s->interrupts_CNFG.TC_Interrupt_Enable_Or_Disable) == USART_Enable )
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	7c9b      	ldrb	r3, [r3, #18]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d108      	bne.n	800084a <MCAL_USART_Init+0x132>
	{
		USARTx->USART_CR1 |= (1<<6);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	60da      	str	r2, [r3, #12]
		TC_flag3=1;
 8000844:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <MCAL_USART_Init+0x1a4>)
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
	}

	if( (TX_flag1 || RX_flag2 || TC_flag3) )
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MCAL_USART_Init+0x19c>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d107      	bne.n	8000862 <MCAL_USART_Init+0x14a>
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <MCAL_USART_Init+0x1a0>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d103      	bne.n	8000862 <MCAL_USART_Init+0x14a>
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MCAL_USART_Init+0x1a4>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d01f      	beq.n	80008a2 <MCAL_USART_Init+0x18a>
	{

		if(USARTx == USART1)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a16      	ldr	r2, [pc, #88]	; (80008c0 <MCAL_USART_Init+0x1a8>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d106      	bne.n	8000878 <MCAL_USART_Init+0x160>
		{
			NVIC->NVIC_ISER1 |= (1<< 5 );
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MCAL_USART_Init+0x1ac>)
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	4a15      	ldr	r2, [pc, #84]	; (80008c4 <MCAL_USART_Init+0x1ac>)
 8000870:	f043 0320 	orr.w	r3, r3, #32
 8000874:	6053      	str	r3, [r2, #4]
		else if(USARTx == USART3)
		{
			NVIC->NVIC_ISER1 |= (1<<7);
		}
	}
}
 8000876:	e014      	b.n	80008a2 <MCAL_USART_Init+0x18a>
		else if(USARTx == USART2)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a13      	ldr	r2, [pc, #76]	; (80008c8 <MCAL_USART_Init+0x1b0>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d106      	bne.n	800088e <MCAL_USART_Init+0x176>
			NVIC->NVIC_ISER1 |= (1<<6);
 8000880:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <MCAL_USART_Init+0x1ac>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <MCAL_USART_Init+0x1ac>)
 8000886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088a:	6053      	str	r3, [r2, #4]
}
 800088c:	e009      	b.n	80008a2 <MCAL_USART_Init+0x18a>
		else if(USARTx == USART3)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <MCAL_USART_Init+0x1b4>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d105      	bne.n	80008a2 <MCAL_USART_Init+0x18a>
			NVIC->NVIC_ISER1 |= (1<<7);
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MCAL_USART_Init+0x1ac>)
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <MCAL_USART_Init+0x1ac>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a0:	6053      	str	r3, [r2, #4]
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bdb0      	pop	{r4, r5, r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000038 	.word	0x20000038
 80008b0:	51eb851f 	.word	0x51eb851f
 80008b4:	20000034 	.word	0x20000034
 80008b8:	20000035 	.word	0x20000035
 80008bc:	20000036 	.word	0x20000036
 80008c0:	40013800 	.word	0x40013800
 80008c4:	e000e100 	.word	0xe000e100
 80008c8:	40004400 	.word	0x40004400
 80008cc:	40004800 	.word	0x40004800

080008d0 <MCAL_USART_SendChar>:
 * @param [in] 	-USARTx: Where x could be 1 or 2 or 3 depending on the Package
 * @param [in]	-Buffer: Is a pointer to the buffer that we want to send
 * @retval		-none
 * Note			-In Our package LQFP48 we have only USART1 and USART2
 */
void    MCAL_USART_SendChar(USART_REGISTERS_t * USARTx,uint16_t * Buffer){
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]

	if(!(  (TX_flag1)||(TC_flag3) ))
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MCAL_USART_SendChar+0x48>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d10a      	bne.n	80008f8 <MCAL_USART_SendChar+0x28>
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MCAL_USART_SendChar+0x4c>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d106      	bne.n	80008f8 <MCAL_USART_SendChar+0x28>
	{
		while(!( USARTx->USART_SR & (1<<7) ) );
 80008ea:	bf00      	nop
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d0f9      	beq.n	80008ec <MCAL_USART_SendChar+0x1c>
	}
	if(Global_USART_Config_s->Async_Config_s.Word_Length == Nine_bits)
	{
		USARTx->USART_DR = (*Buffer  & 0x01FF );
	}
	else if(Global_USART_Config_s->Async_Config_s.Word_Length == Eight_bits)
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MCAL_USART_SendChar+0x50>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	791b      	ldrb	r3, [r3, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d104      	bne.n	800090c <MCAL_USART_SendChar+0x3c>
	{
		USARTx->USART_DR = (*Buffer  & 0xFF );
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	b2da      	uxtb	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	605a      	str	r2, [r3, #4]
	}




}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	20000034 	.word	0x20000034
 800091c:	20000036 	.word	0x20000036
 8000920:	20000038 	.word	0x20000038

08000924 <MCAL_USART_ReceiveChar>:
 * @param [in] 	-USARTx: Where x could be 1 or 2 or 3 depending on the Package
 * @param [in]	-Buffer: Is a pointer to the buffer where we want to save the received value
 * @retval		-none
 * Note			-In Our package LQFP48 we have only USART1 and USART2
 */
void MCAL_USART_ReceiveChar(USART_REGISTERS_t * USARTx,uint16_t * Buffer){
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]

	if( !(  (TX_flag1)||(RX_flag2)||(TC_flag3) )  )
 800092e:	4b19      	ldr	r3, [pc, #100]	; (8000994 <MCAL_USART_ReceiveChar+0x70>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d10e      	bne.n	8000954 <MCAL_USART_ReceiveChar+0x30>
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MCAL_USART_ReceiveChar+0x74>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d10a      	bne.n	8000954 <MCAL_USART_ReceiveChar+0x30>
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MCAL_USART_ReceiveChar+0x78>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d106      	bne.n	8000954 <MCAL_USART_ReceiveChar+0x30>
	{
		while(!( USARTx->USART_SR & (1<<5) ) );
 8000946:	bf00      	nop
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f003 0320 	and.w	r3, r3, #32
 8000950:	2b00      	cmp	r3, #0
 8000952:	d0f9      	beq.n	8000948 <MCAL_USART_ReceiveChar+0x24>
		else
		{
			*Buffer = USARTx->USART_DR & 0x01FF;
		}
	}
	else if(Global_USART_Config_s->Async_Config_s.Word_Length == Eight_bits)
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MCAL_USART_ReceiveChar+0x7c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	791b      	ldrb	r3, [r3, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d114      	bne.n	8000988 <MCAL_USART_ReceiveChar+0x64>
	{
		if(Global_USART_Config_s->Async_Config_s.Parity.Parity_Enable)
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <MCAL_USART_ReceiveChar+0x7c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	7b1b      	ldrb	r3, [r3, #12]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d008      	beq.n	800097a <MCAL_USART_ReceiveChar+0x56>
		{
			*Buffer = USARTx->USART_DR   & 0x7F ;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	b29b      	uxth	r3, r3
 800096e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000972:	b29a      	uxth	r2, r3
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	801a      	strh	r2, [r3, #0]
		{
			*Buffer = USARTx->USART_DR & 0x0FF;
		}
	}

}
 8000978:	e006      	b.n	8000988 <MCAL_USART_ReceiveChar+0x64>
			*Buffer = USARTx->USART_DR & 0x0FF;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	b29b      	uxth	r3, r3
 8000980:	b2db      	uxtb	r3, r3
 8000982:	b29a      	uxth	r2, r3
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	801a      	strh	r2, [r3, #0]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000034 	.word	0x20000034
 8000998:	20000035 	.word	0x20000035
 800099c:	20000036 	.word	0x20000036
 80009a0:	20000038 	.word	0x20000038

080009a4 <MCAL_USART_GPIO_Pins_Config>:
 * @brief 		-This Function is to configure the USART pins to its alternative function
 * @param [in] 	-USARTx: Where x could be 1 or 2 or 3 depending on the Package
 * @retval		-none
 * Note			-In Our package LQFP48 we have only USART1 AND USART2
 */
void 	MCAL_USART_GPIO_Pins_Config(USART_REGISTERS_t * USARTx){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08c      	sub	sp, #48	; 0x30
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

	// USARTx_RX Full duplex Input floating / Input pull-up
	// USARTx_TX(1) Full duplex Alternate function push-pull
	if(USARTx == USART1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a29      	ldr	r2, [pc, #164]	; (8000a54 <MCAL_USART_GPIO_Pins_Config+0xb0>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d116      	bne.n	80009e2 <MCAL_USART_GPIO_Pins_Config+0x3e>
	{
		// USART1_TX PA9
		//USART1_RX PA10
		Pin_Config_t GPIO_Pin_CNFG_s;
		GPIO_Pin_CNFG_s.Pin_Num = 9;
 80009b4:	2309      	movs	r3, #9
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_Pin_CNFG_s.mode = Output_ALF_Push_pull;
 80009b8:	2306      	movs	r3, #6
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_Pin_CNFG_s.Speed_Output = speed_10;
 80009bc:	2301      	movs	r3, #1
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
		MCAL_GPIO_Init(GPIOA, &GPIO_Pin_CNFG_s);
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4824      	ldr	r0, [pc, #144]	; (8000a58 <MCAL_USART_GPIO_Pins_Config+0xb4>)
 80009c8:	f7ff fd4a 	bl	8000460 <MCAL_GPIO_Init>

		GPIO_Pin_CNFG_s.Pin_Num = 10;
 80009cc:	230a      	movs	r3, #10
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_Pin_CNFG_s.mode = Input_AF;
 80009d0:	2308      	movs	r3, #8
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
		MCAL_GPIO_Init(GPIOA, &GPIO_Pin_CNFG_s);
 80009d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d8:	4619      	mov	r1, r3
 80009da:	481f      	ldr	r0, [pc, #124]	; (8000a58 <MCAL_USART_GPIO_Pins_Config+0xb4>)
 80009dc:	f7ff fd40 	bl	8000460 <MCAL_GPIO_Init>
		GPIO_Pin_CNFG_s.Pin_Num = 11;
		GPIO_Pin_CNFG_s.mode = Input_AF;
		MCAL_GPIO_Init(GPIOB, &GPIO_Pin_CNFG_s);

	}
}
 80009e0:	e034      	b.n	8000a4c <MCAL_USART_GPIO_Pins_Config+0xa8>
	else if(USARTx == USART2)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a1d      	ldr	r2, [pc, #116]	; (8000a5c <MCAL_USART_GPIO_Pins_Config+0xb8>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d116      	bne.n	8000a18 <MCAL_USART_GPIO_Pins_Config+0x74>
		GPIO_Pin_CNFG_s.Pin_Num = 2;
 80009ea:	2302      	movs	r3, #2
 80009ec:	61bb      	str	r3, [r7, #24]
		GPIO_Pin_CNFG_s.mode = Output_ALF_Push_pull;
 80009ee:	2306      	movs	r3, #6
 80009f0:	61fb      	str	r3, [r7, #28]
		GPIO_Pin_CNFG_s.Speed_Output = speed_10;
 80009f2:	2301      	movs	r3, #1
 80009f4:	623b      	str	r3, [r7, #32]
		MCAL_GPIO_Init(GPIOA, &GPIO_Pin_CNFG_s);
 80009f6:	f107 0318 	add.w	r3, r7, #24
 80009fa:	4619      	mov	r1, r3
 80009fc:	4816      	ldr	r0, [pc, #88]	; (8000a58 <MCAL_USART_GPIO_Pins_Config+0xb4>)
 80009fe:	f7ff fd2f 	bl	8000460 <MCAL_GPIO_Init>
		GPIO_Pin_CNFG_s.Pin_Num = 3;
 8000a02:	2303      	movs	r3, #3
 8000a04:	61bb      	str	r3, [r7, #24]
		GPIO_Pin_CNFG_s.mode = Input_AF;
 8000a06:	2308      	movs	r3, #8
 8000a08:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_Init(GPIOA, &GPIO_Pin_CNFG_s);
 8000a0a:	f107 0318 	add.w	r3, r7, #24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4811      	ldr	r0, [pc, #68]	; (8000a58 <MCAL_USART_GPIO_Pins_Config+0xb4>)
 8000a12:	f7ff fd25 	bl	8000460 <MCAL_GPIO_Init>
}
 8000a16:	e019      	b.n	8000a4c <MCAL_USART_GPIO_Pins_Config+0xa8>
	else if(USARTx == USART3)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a11      	ldr	r2, [pc, #68]	; (8000a60 <MCAL_USART_GPIO_Pins_Config+0xbc>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d115      	bne.n	8000a4c <MCAL_USART_GPIO_Pins_Config+0xa8>
		GPIO_Pin_CNFG_s.Pin_Num = 10;
 8000a20:	230a      	movs	r3, #10
 8000a22:	60fb      	str	r3, [r7, #12]
		GPIO_Pin_CNFG_s.mode = Output_ALF_Push_pull;
 8000a24:	2306      	movs	r3, #6
 8000a26:	613b      	str	r3, [r7, #16]
		GPIO_Pin_CNFG_s.Speed_Output = speed_10;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOB, &GPIO_Pin_CNFG_s);
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	4619      	mov	r1, r3
 8000a32:	480c      	ldr	r0, [pc, #48]	; (8000a64 <MCAL_USART_GPIO_Pins_Config+0xc0>)
 8000a34:	f7ff fd14 	bl	8000460 <MCAL_GPIO_Init>
		GPIO_Pin_CNFG_s.Pin_Num = 11;
 8000a38:	230b      	movs	r3, #11
 8000a3a:	60fb      	str	r3, [r7, #12]
		GPIO_Pin_CNFG_s.mode = Input_AF;
 8000a3c:	2308      	movs	r3, #8
 8000a3e:	613b      	str	r3, [r7, #16]
		MCAL_GPIO_Init(GPIOB, &GPIO_Pin_CNFG_s);
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	4619      	mov	r1, r3
 8000a46:	4807      	ldr	r0, [pc, #28]	; (8000a64 <MCAL_USART_GPIO_Pins_Config+0xc0>)
 8000a48:	f7ff fd0a 	bl	8000460 <MCAL_GPIO_Init>
}
 8000a4c:	bf00      	nop
 8000a4e:	3730      	adds	r7, #48	; 0x30
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40013800 	.word	0x40013800
 8000a58:	40010800 	.word	0x40010800
 8000a5c:	40004400 	.word	0x40004400
 8000a60:	40004800 	.word	0x40004800
 8000a64:	40010c00 	.word	0x40010c00

08000a68 <USART1_IRQHandler>:

//-----------------------------------------------
//------------------<< ISR >>--------------------
//-----------------------------------------------
void USART1_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
	interrupts_Bits IRQ = { ( (USART1->USART_SR) & (0b1<<5) ) >> 5 , ( (USART1->USART_SR) & (0b1<<6) ) >> 6 , ( (USART1->USART_SR) & (0b1<<7) ) >> 7};
 8000a6e:	2300      	movs	r3, #0
 8000a70:	713b      	strb	r3, [r7, #4]
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <USART1_IRQHandler+0x5c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	095b      	lsrs	r3, r3, #5
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	793b      	ldrb	r3, [r7, #4]
 8000a80:	f362 0300 	bfi	r3, r2, #0, #1
 8000a84:	713b      	strb	r3, [r7, #4]
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <USART1_IRQHandler+0x5c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	099b      	lsrs	r3, r3, #6
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	793b      	ldrb	r3, [r7, #4]
 8000a94:	f362 0341 	bfi	r3, r2, #1, #1
 8000a98:	713b      	strb	r3, [r7, #4]
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <USART1_IRQHandler+0x5c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	09db      	lsrs	r3, r3, #7
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	793b      	ldrb	r3, [r7, #4]
 8000aa8:	f362 0382 	bfi	r3, r2, #2, #1
 8000aac:	713b      	strb	r3, [r7, #4]
	Global_USART_Config_s->CallBack_FN (&IRQ);
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <USART1_IRQHandler+0x60>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	1d3a      	adds	r2, r7, #4
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4798      	blx	r3
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40013800 	.word	0x40013800
 8000ac8:	20000038 	.word	0x20000038

08000acc <Usart_callback>:
// Flags for task activation
uint8_t task1_flag = 0, task2_flag = 0;

// USART callback function to handle incoming data
void Usart_callback(interrupts_Bits *IRQ)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
    MCAL_USART_ReceiveChar(USART1, &buff);
 8000ad4:	492d      	ldr	r1, [pc, #180]	; (8000b8c <Usart_callback+0xc0>)
 8000ad6:	482e      	ldr	r0, [pc, #184]	; (8000b90 <Usart_callback+0xc4>)
 8000ad8:	f7ff ff24 	bl	8000924 <MCAL_USART_ReceiveChar>

    switch (buff)
 8000adc:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <Usart_callback+0xc0>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	3b10      	subs	r3, #16
 8000ae2:	2b12      	cmp	r3, #18
 8000ae4:	d84d      	bhi.n	8000b82 <Usart_callback+0xb6>
 8000ae6:	a201      	add	r2, pc, #4	; (adr r2, 8000aec <Usart_callback+0x20>)
 8000ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aec:	08000b39 	.word	0x08000b39
 8000af0:	08000b59 	.word	0x08000b59
 8000af4:	08000b83 	.word	0x08000b83
 8000af8:	08000b83 	.word	0x08000b83
 8000afc:	08000b83 	.word	0x08000b83
 8000b00:	08000b83 	.word	0x08000b83
 8000b04:	08000b83 	.word	0x08000b83
 8000b08:	08000b83 	.word	0x08000b83
 8000b0c:	08000b83 	.word	0x08000b83
 8000b10:	08000b83 	.word	0x08000b83
 8000b14:	08000b83 	.word	0x08000b83
 8000b18:	08000b83 	.word	0x08000b83
 8000b1c:	08000b83 	.word	0x08000b83
 8000b20:	08000b83 	.word	0x08000b83
 8000b24:	08000b83 	.word	0x08000b83
 8000b28:	08000b83 	.word	0x08000b83
 8000b2c:	08000b49 	.word	0x08000b49
 8000b30:	08000b83 	.word	0x08000b83
 8000b34:	08000b6b 	.word	0x08000b6b
    {
    case 0x10:
        if (task1_flag == 0)
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <Usart_callback+0xc8>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d11d      	bne.n	8000b7c <Usart_callback+0xb0>
        {
            task1_flag = 1;
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <Usart_callback+0xc8>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000b46:	e019      	b.n	8000b7c <Usart_callback+0xb0>

    case 0x20:
        if (task2_flag == 0)
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <Usart_callback+0xcc>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d117      	bne.n	8000b80 <Usart_callback+0xb4>
        {
            task2_flag = 1;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <Usart_callback+0xcc>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000b56:	e013      	b.n	8000b80 <Usart_callback+0xb4>

    case 0x11:
        task1_flag = 0;
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <Usart_callback+0xc8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
        MCAL_GPIO_WritePin(GPIOB, 9, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2109      	movs	r1, #9
 8000b62:	480e      	ldr	r0, [pc, #56]	; (8000b9c <Usart_callback+0xd0>)
 8000b64:	f7ff fcfb 	bl	800055e <MCAL_GPIO_WritePin>
        break;
 8000b68:	e00b      	b.n	8000b82 <Usart_callback+0xb6>

    case 0x22:
        task2_flag = 0;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <Usart_callback+0xcc>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
        MCAL_GPIO_WritePin(GPIOB, 8, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2108      	movs	r1, #8
 8000b74:	4809      	ldr	r0, [pc, #36]	; (8000b9c <Usart_callback+0xd0>)
 8000b76:	f7ff fcf2 	bl	800055e <MCAL_GPIO_WritePin>
        break;
 8000b7a:	e002      	b.n	8000b82 <Usart_callback+0xb6>
        break;
 8000b7c:	bf00      	nop
 8000b7e:	e000      	b.n	8000b82 <Usart_callback+0xb6>
        break;
 8000b80:	bf00      	nop
    }
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000080 	.word	0x20000080
 8000b90:	40013800 	.word	0x40013800
 8000b94:	2000003c 	.word	0x2000003c
 8000b98:	2000003d 	.word	0x2000003d
 8000b9c:	40010c00 	.word	0x40010c00

08000ba0 <sendCommand>:

// Function to send a command over USART
void sendCommand(char *command)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
    uint8_t length = strlen(command);
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff faeb 	bl	8000184 <strlen>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	72fb      	strb	r3, [r7, #11]

    for (int i = 0; i <= length; i++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	e00d      	b.n	8000bd4 <sendCommand+0x34>
    {
        buffer = (uint16_t)command[i];
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <sendCommand+0x44>)
 8000bc4:	801a      	strh	r2, [r3, #0]
        MCAL_USART_SendChar(USART1, &buffer);
 8000bc6:	4907      	ldr	r1, [pc, #28]	; (8000be4 <sendCommand+0x44>)
 8000bc8:	4807      	ldr	r0, [pc, #28]	; (8000be8 <sendCommand+0x48>)
 8000bca:	f7ff fe81 	bl	80008d0 <MCAL_USART_SendChar>
    for (int i = 0; i <= length; i++)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	7afb      	ldrb	r3, [r7, #11]
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	dded      	ble.n	8000bb8 <sendCommand+0x18>
    }
}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200000c8 	.word	0x200000c8
 8000be8:	40013800 	.word	0x40013800

08000bec <task1>:

// Task 1: Toggles GPIO pin based on flag
void task1(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
    while (1)
    {
        while (task1_flag == 1)
 8000bf0:	e007      	b.n	8000c02 <task1+0x16>
        {
            MCAL_GPIO_TogglePin(GPIOB, 9);
 8000bf2:	2109      	movs	r1, #9
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <task1+0x20>)
 8000bf6:	f7ff fcd0 	bl	800059a <MCAL_GPIO_TogglePin>
            teraRTOS_TaskWait(100, &Task1);
 8000bfa:	4905      	ldr	r1, [pc, #20]	; (8000c10 <task1+0x24>)
 8000bfc:	2064      	movs	r0, #100	; 0x64
 8000bfe:	f000 fccb 	bl	8001598 <teraRTOS_TaskWait>
        while (task1_flag == 1)
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <task1+0x28>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d0f3      	beq.n	8000bf2 <task1+0x6>
 8000c0a:	e7fa      	b.n	8000c02 <task1+0x16>
 8000c0c:	40010c00 	.word	0x40010c00
 8000c10:	20000084 	.word	0x20000084
 8000c14:	2000003c 	.word	0x2000003c

08000c18 <task2>:
    }
}

// Task 2: Toggles GPIO pin based on flag
void task2(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
    while (1)
    {
        while (task2_flag == 1)
 8000c1c:	e007      	b.n	8000c2e <task2+0x16>
        {
            MCAL_GPIO_TogglePin(GPIOB, 8);
 8000c1e:	2108      	movs	r1, #8
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <task2+0x20>)
 8000c22:	f7ff fcba 	bl	800059a <MCAL_GPIO_TogglePin>
            teraRTOS_TaskWait(200, &Task2);
 8000c26:	4905      	ldr	r1, [pc, #20]	; (8000c3c <task2+0x24>)
 8000c28:	20c8      	movs	r0, #200	; 0xc8
 8000c2a:	f000 fcb5 	bl	8001598 <teraRTOS_TaskWait>
        while (task2_flag == 1)
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <task2+0x28>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d0f3      	beq.n	8000c1e <task2+0x6>
 8000c36:	e7fa      	b.n	8000c2e <task2+0x16>
 8000c38:	40010c00 	.word	0x40010c00
 8000c3c:	200000cc 	.word	0x200000cc
 8000c40:	2000003d 	.word	0x2000003d

08000c44 <main>:
    }
}

// Main entry point of the program
int main(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
    TERA_RTOS_ErrorType Error;

    // Initialize hardware (Clock, Reset, etc.)
    HW_init();
 8000c4a:	f000 f935 	bl	8000eb8 <HW_init>
    GPIOB_CLOCK_EN();
 8000c4e:	4b44      	ldr	r3, [pc, #272]	; (8000d60 <main+0x11c>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	4a43      	ldr	r2, [pc, #268]	; (8000d60 <main+0x11c>)
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	6193      	str	r3, [r2, #24]
    USART1_CLOCK_EN();
 8000c5a:	4b41      	ldr	r3, [pc, #260]	; (8000d60 <main+0x11c>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	4a40      	ldr	r2, [pc, #256]	; (8000d60 <main+0x11c>)
 8000c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c64:	6193      	str	r3, [r2, #24]

    // GPIO Pin configuration
    Pin_Config_t Pin_config;
    Pin_config.Pin_Num = 8;
 8000c66:	2308      	movs	r3, #8
 8000c68:	61bb      	str	r3, [r7, #24]
    Pin_config.mode = Output_Push_pull;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	61fb      	str	r3, [r7, #28]
    Pin_config.Speed_Output = speed_10;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	623b      	str	r3, [r7, #32]
    MCAL_GPIO_Init(GPIOB, &Pin_config);
 8000c72:	f107 0318 	add.w	r3, r7, #24
 8000c76:	4619      	mov	r1, r3
 8000c78:	483a      	ldr	r0, [pc, #232]	; (8000d64 <main+0x120>)
 8000c7a:	f7ff fbf1 	bl	8000460 <MCAL_GPIO_Init>

    Pin_config.Pin_Num = 9;
 8000c7e:	2309      	movs	r3, #9
 8000c80:	61bb      	str	r3, [r7, #24]
    Pin_config.mode = Output_Push_pull;
 8000c82:	2304      	movs	r3, #4
 8000c84:	61fb      	str	r3, [r7, #28]
    Pin_config.Speed_Output = speed_10;
 8000c86:	2301      	movs	r3, #1
 8000c88:	623b      	str	r3, [r7, #32]
    MCAL_GPIO_Init(GPIOB, &Pin_config);
 8000c8a:	f107 0318 	add.w	r3, r7, #24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4834      	ldr	r0, [pc, #208]	; (8000d64 <main+0x120>)
 8000c92:	f7ff fbe5 	bl	8000460 <MCAL_GPIO_Init>

    // USART initialization
    USART_Config_t UART_CNFG_s;
    UART_CNFG_s.Async_EN = USART_Enable;
 8000c96:	2301      	movs	r3, #1
 8000c98:	703b      	strb	r3, [r7, #0]
    UART_CNFG_s.Async_Config_s.Baud_Rate = 9600;
 8000c9a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000c9e:	60bb      	str	r3, [r7, #8]
    UART_CNFG_s.Async_Config_s.Stop_Bits = Stop_1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	717b      	strb	r3, [r7, #5]
    UART_CNFG_s.Async_Config_s.Word_Length = Eight_bits;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	713b      	strb	r3, [r7, #4]
    UART_CNFG_s.interrupts_CNFG.RX_Interrupt_Enable_Or_Disable = USART_Enable;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	747b      	strb	r3, [r7, #17]
    UART_CNFG_s.CallBack_FN = Usart_callback;
 8000cac:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <main+0x124>)
 8000cae:	617b      	str	r3, [r7, #20]
    MCAL_USART_Init(USART1, &UART_CNFG_s);
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	482d      	ldr	r0, [pc, #180]	; (8000d6c <main+0x128>)
 8000cb6:	f7ff fd2f 	bl	8000718 <MCAL_USART_Init>
    MCAL_USART_GPIO_Pins_Config(USART1);
 8000cba:	482c      	ldr	r0, [pc, #176]	; (8000d6c <main+0x128>)
 8000cbc:	f7ff fe72 	bl	80009a4 <MCAL_USART_GPIO_Pins_Config>

    // Send initialization commands via USART
    sendCommand("AT+RESET\r\n");
 8000cc0:	482b      	ldr	r0, [pc, #172]	; (8000d70 <main+0x12c>)
 8000cc2:	f7ff ff6d 	bl	8000ba0 <sendCommand>
    sendCommand("AT+NAMETERA\r\n");
 8000cc6:	482b      	ldr	r0, [pc, #172]	; (8000d74 <main+0x130>)
 8000cc8:	f7ff ff6a 	bl	8000ba0 <sendCommand>
    sendCommand("AT+UUID0xFFE0\r\n");
 8000ccc:	482a      	ldr	r0, [pc, #168]	; (8000d78 <main+0x134>)
 8000cce:	f7ff ff67 	bl	8000ba0 <sendCommand>
    sendCommand("AT+CHAR0xDEAD\r\n");
 8000cd2:	482a      	ldr	r0, [pc, #168]	; (8000d7c <main+0x138>)
 8000cd4:	f7ff ff64 	bl	8000ba0 <sendCommand>

    // Initialize RTOS
    if (TERA_RTOS_init() != NoError)
 8000cd8:	f000 fb6a 	bl	80013b0 <TERA_RTOS_init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d000      	beq.n	8000ce4 <main+0xa0>
        while (1);
 8000ce2:	e7fe      	b.n	8000ce2 <main+0x9e>

    // Configure and create Task 1
    Task1.Stack_Size = 1024;
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <main+0x13c>)
 8000ce6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cea:	601a      	str	r2, [r3, #0]
    Task1.TaskEntry_Ptr = task1;
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <main+0x13c>)
 8000cee:	4a25      	ldr	r2, [pc, #148]	; (8000d84 <main+0x140>)
 8000cf0:	609a      	str	r2, [r3, #8]
    Task1.Priority = 4;
 8000cf2:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <main+0x13c>)
 8000cf4:	2204      	movs	r2, #4
 8000cf6:	711a      	strb	r2, [r3, #4]
    strcpy(Task1.TaskName, "Task_1");
 8000cf8:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <main+0x144>)
 8000cfa:	4a24      	ldr	r2, [pc, #144]	; (8000d8c <main+0x148>)
 8000cfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d00:	6018      	str	r0, [r3, #0]
 8000d02:	3304      	adds	r3, #4
 8000d04:	8019      	strh	r1, [r3, #0]
 8000d06:	3302      	adds	r3, #2
 8000d08:	0c0a      	lsrs	r2, r1, #16
 8000d0a:	701a      	strb	r2, [r3, #0]
    Error = teraRTOS_CreateTask(&Task1);
 8000d0c:	481c      	ldr	r0, [pc, #112]	; (8000d80 <main+0x13c>)
 8000d0e:	f000 fbc9 	bl	80014a4 <teraRTOS_CreateTask>
 8000d12:	4603      	mov	r3, r0
 8000d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Configure and create Task 2
    Task2.Stack_Size = 1024;
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <main+0x14c>)
 8000d1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d1e:	601a      	str	r2, [r3, #0]
    Task2.TaskEntry_Ptr = task2;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <main+0x14c>)
 8000d22:	4a1c      	ldr	r2, [pc, #112]	; (8000d94 <main+0x150>)
 8000d24:	609a      	str	r2, [r3, #8]
    Task2.Priority = 4;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <main+0x14c>)
 8000d28:	2204      	movs	r2, #4
 8000d2a:	711a      	strb	r2, [r3, #4]
    strcpy(Task2.TaskName, "Task_2");
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <main+0x154>)
 8000d2e:	4a1b      	ldr	r2, [pc, #108]	; (8000d9c <main+0x158>)
 8000d30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d34:	6018      	str	r0, [r3, #0]
 8000d36:	3304      	adds	r3, #4
 8000d38:	8019      	strh	r1, [r3, #0]
 8000d3a:	3302      	adds	r3, #2
 8000d3c:	0c0a      	lsrs	r2, r1, #16
 8000d3e:	701a      	strb	r2, [r3, #0]
    Error = teraRTOS_CreateTask(&Task2);
 8000d40:	4813      	ldr	r0, [pc, #76]	; (8000d90 <main+0x14c>)
 8000d42:	f000 fbaf 	bl	80014a4 <teraRTOS_CreateTask>
 8000d46:	4603      	mov	r3, r0
 8000d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Activate tasks
    teraRTOS_ActivateTask(&Task1);
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <main+0x13c>)
 8000d4e:	f000 fbff 	bl	8001550 <teraRTOS_ActivateTask>
    teraRTOS_ActivateTask(&Task2);
 8000d52:	480f      	ldr	r0, [pc, #60]	; (8000d90 <main+0x14c>)
 8000d54:	f000 fbfc 	bl	8001550 <teraRTOS_ActivateTask>

    // Start the RTOS
    teraRTOS_START();
 8000d58:	f000 fc32 	bl	80015c0 <teraRTOS_START>

    // Infinite loop (Idle task)
    while (1)
 8000d5c:	e7fe      	b.n	8000d5c <main+0x118>
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40010c00 	.word	0x40010c00
 8000d68:	08000acd 	.word	0x08000acd
 8000d6c:	40013800 	.word	0x40013800
 8000d70:	08001848 	.word	0x08001848
 8000d74:	08001854 	.word	0x08001854
 8000d78:	08001864 	.word	0x08001864
 8000d7c:	08001874 	.word	0x08001874
 8000d80:	20000084 	.word	0x20000084
 8000d84:	08000bed 	.word	0x08000bed
 8000d88:	200000a0 	.word	0x200000a0
 8000d8c:	08001884 	.word	0x08001884
 8000d90:	200000cc 	.word	0x200000cc
 8000d94:	08000c19 	.word	0x08000c19
 8000d98:	200000e8 	.word	0x200000e8
 8000d9c:	0800188c 	.word	0x0800188c

08000da0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000da0:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000da2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000da4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	; (8000de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <LoopForever+0xe>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	; (8000dec <LoopForever+0x16>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dce:	f000 fd0b 	bl	80017e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dd2:	f7ff ff37 	bl	8000c44 <main>

08000dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd6:	e7fe      	b.n	8000dd6 <LoopForever>
  ldr   r0, =_estack
 8000dd8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000de4:	080018a8 	.word	0x080018a8
  ldr r2, =_sbss
 8000de8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000dec:	200004a8 	.word	0x200004a8

08000df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC1_2_IRQHandler>
	...

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	; (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	0152      	lsls	r2, r2, #5
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	; (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0152      	lsls	r2, r2, #5
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e58:	d301      	bcc.n	8000e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00f      	b.n	8000e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <SysTick_Config+0x40>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e66:	2107      	movs	r1, #7
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f7ff ffc2 	bl	8000df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <SysTick_Config+0x40>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <SysTick_Config+0x40>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <HardFault_Handler>:
extern void Decide_WhatNext(void);


uint8_t SysTickLED =0;

void HardFault_Handler(void) {
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

	while(1);
 8000e90:	e7fe      	b.n	8000e90 <HardFault_Handler+0x4>

08000e92 <MemManage_Handler>:

}
void MemManage_Handler(void){
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

	while(1);
 8000e96:	e7fe      	b.n	8000e96 <MemManage_Handler+0x4>

08000e98 <BusFault_Handler>:

}
void BusFault_Handler(void){
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

	while(1);
 8000e9c:	e7fe      	b.n	8000e9c <BusFault_Handler+0x4>

08000e9e <UsageFault_Handler>:

}
void UsageFault_Handler(void){
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

	while(1);
 8000ea2:	e7fe      	b.n	8000ea2 <UsageFault_Handler+0x4>

08000ea4 <SVC_Handler>:
}


__attribute ((naked)) void SVC_Handler(void)
{
	__asm("TST LR,0x4");
 8000ea4:	f01e 0f04 	tst.w	lr, #4
	__asm("ITE EQ");
 8000ea8:	bf0c      	ite	eq
	__asm("MRSEQ R0,MSP");
 8000eaa:	f3ef 8008 	mrseq	r0, MSP
	__asm("MRSNE R0,PSP");
 8000eae:	f3ef 8009 	mrsne	r0, PSP
	__asm("B OS_SVC_services");
 8000eb2:	f000 b93b 	b.w	800112c <OS_SVC_services>



}
 8000eb6:	bf00      	nop

08000eb8 <HW_init>:

void HW_init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	// x count -> 1 ms
	// x = 8000 Count

	// Decrease PendSV interrupt priority to be smaller than or equal SysTick Timer
	//SysTick has a priority equal to 14
	__NVIC_SetPriority(PendSV_IRQn, 15);
 8000ebc:	210f      	movs	r1, #15
 8000ebe:	f06f 0001 	mvn.w	r0, #1
 8000ec2:	f7ff ff97 	bl	8000df4 <__NVIC_SetPriority>



}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <trigger_OS_PendSV>:
void trigger_OS_PendSV(void){
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <trigger_OS_PendSV+0x18>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	4a03      	ldr	r2, [pc, #12]	; (8000ee4 <trigger_OS_PendSV+0x18>)
 8000ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eda:	6053      	str	r3, [r2, #4]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <Start_Ticker>:


void Start_Ticker()
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	//8 MHZ
	// 1 count -> 0.125 us
	// x count -> 1 ms
	// x = 8000 Count

	SysTick_Config(8000);
 8000eec:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000ef0:	f7ff ffaa 	bl	8000e48 <SysTick_Config>

}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

	SysTickLED ^= 1;
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <SysTick_Handler+0x24>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	f083 0301 	eor.w	r3, r3, #1
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <SysTick_Handler+0x24>)
 8000f08:	701a      	strb	r2, [r3, #0]
	teraRTOS_Update_TaskWaitingTime();
 8000f0a:	f000 fb85 	bl	8001618 <teraRTOS_Update_TaskWaitingTime>
	//Determine Pcurrent&Pnext
	Decide_WhatNext();
 8000f0e:	f000 f8bb 	bl	8001088 <Decide_WhatNext>
	//Context Switch/Restore
	trigger_OS_PendSV();
 8000f12:	f7ff ffdb 	bl	8000ecc <trigger_OS_PendSV>

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000003e 	.word	0x2000003e

08000f20 <BubbleSort>:
	SVC_WaitingTask
}SVC_ID;


//Handler Mode
void BubbleSort(){
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0

	uint8_t i=0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	71fb      	strb	r3, [r7, #7]
	uint8_t j=0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	71bb      	strb	r3, [r7, #6]
	uint8_t n;


	Task_Creation * temp;
	n = OS_Control.ActiveTasks_number;
 8000f2e:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <BubbleSort+0x94>)
 8000f30:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000f34:	717b      	strb	r3, [r7, #5]

	for(i=0; i<n-1; i++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	e030      	b.n	8000f9e <BubbleSort+0x7e>
	{
		for(j=0; j<n-i-1; j++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	71bb      	strb	r3, [r7, #6]
 8000f40:	e023      	b.n	8000f8a <BubbleSort+0x6a>
		{
			if (OS_Control.OS_Tasks[j]->Priority > OS_Control.OS_Tasks[j+1]->Priority)
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	4a1b      	ldr	r2, [pc, #108]	; (8000fb4 <BubbleSort+0x94>)
 8000f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4a:	791a      	ldrb	r2, [r3, #4]
 8000f4c:	79bb      	ldrb	r3, [r7, #6]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	4918      	ldr	r1, [pc, #96]	; (8000fb4 <BubbleSort+0x94>)
 8000f52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f56:	791b      	ldrb	r3, [r3, #4]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d913      	bls.n	8000f84 <BubbleSort+0x64>
			{
				temp = OS_Control.OS_Tasks[j];
 8000f5c:	79bb      	ldrb	r3, [r7, #6]
 8000f5e:	4a15      	ldr	r2, [pc, #84]	; (8000fb4 <BubbleSort+0x94>)
 8000f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f64:	603b      	str	r3, [r7, #0]
				OS_Control.OS_Tasks[j] = OS_Control.OS_Tasks[j+1];
 8000f66:	79bb      	ldrb	r3, [r7, #6]
 8000f68:	1c5a      	adds	r2, r3, #1
 8000f6a:	79bb      	ldrb	r3, [r7, #6]
 8000f6c:	4911      	ldr	r1, [pc, #68]	; (8000fb4 <BubbleSort+0x94>)
 8000f6e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f72:	4910      	ldr	r1, [pc, #64]	; (8000fb4 <BubbleSort+0x94>)
 8000f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OS_Tasks[j+1] = temp;
 8000f78:	79bb      	ldrb	r3, [r7, #6]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	490d      	ldr	r1, [pc, #52]	; (8000fb4 <BubbleSort+0x94>)
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j=0; j<n-i-1; j++)
 8000f84:	79bb      	ldrb	r3, [r7, #6]
 8000f86:	3301      	adds	r3, #1
 8000f88:	71bb      	strb	r3, [r7, #6]
 8000f8a:	79ba      	ldrb	r2, [r7, #6]
 8000f8c:	7979      	ldrb	r1, [r7, #5]
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	1acb      	subs	r3, r1, r3
 8000f92:	3b01      	subs	r3, #1
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dbd4      	blt.n	8000f42 <BubbleSort+0x22>
	for(i=0; i<n-1; i++)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	79fa      	ldrb	r2, [r7, #7]
 8000fa0:	797b      	ldrb	r3, [r7, #5]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	dbc9      	blt.n	8000f3c <BubbleSort+0x1c>

		}
	}


}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200002fc 	.word	0x200002fc

08000fb8 <teraRTOS_Update_SchedulerTable>:

//Handler MODE
void teraRTOS_Update_SchedulerTable(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0

	Task_Creation * Ptask;
	Task_Creation * PnextTask;

	int i = 0 ;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]



	Task_Creation * temp = NULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	603b      	str	r3, [r7, #0]

	//1- Bubble sort the scheduler table -> OS_Control.OS_Tasks[100] (FROM HIGH PRIORITY TO LOW)
	BubbleSort();
 8000fc6:	f7ff ffab 	bl	8000f20 <BubbleSort>
	//2- Free ready queue
	while(FIFO_dequeue(&Ready_Queue, &temp) != FIFO_EMPTY);
 8000fca:	bf00      	nop
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	482b      	ldr	r0, [pc, #172]	; (8001080 <teraRTOS_Update_SchedulerTable+0xc8>)
 8000fd2:	f000 fbcb 	bl	800176c <FIFO_dequeue>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d1f7      	bne.n	8000fcc <teraRTOS_Update_SchedulerTable+0x14>

	//3- Update ready queue
	while(i< OS_Control.ActiveTasks_number)
 8000fdc:	e044      	b.n	8001068 <teraRTOS_Update_SchedulerTable+0xb0>
	{
		Ptask =	OS_Control.OS_Tasks[i];
 8000fde:	4a29      	ldr	r2, [pc, #164]	; (8001084 <teraRTOS_Update_SchedulerTable+0xcc>)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe6:	60bb      	str	r3, [r7, #8]
		PnextTask =	OS_Control.OS_Tasks[i+1];
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3301      	adds	r3, #1
 8000fec:	4a25      	ldr	r2, [pc, #148]	; (8001084 <teraRTOS_Update_SchedulerTable+0xcc>)
 8000fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff2:	607b      	str	r3, [r7, #4]
		if(Ptask->TaskState != Suspended)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d031      	beq.n	8001062 <teraRTOS_Update_SchedulerTable+0xaa>
		{
			if(PnextTask->TaskState == Suspended)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001004:	2b00      	cmp	r3, #0
 8001006:	d108      	bne.n	800101a <teraRTOS_Update_SchedulerTable+0x62>
			{
				FIFO_enqueue(&Ready_Queue, Ptask);
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	481d      	ldr	r0, [pc, #116]	; (8001080 <teraRTOS_Update_SchedulerTable+0xc8>)
 800100c:	f000 fb6c 	bl	80016e8 <FIFO_enqueue>
				Ptask->TaskState = Ready;
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	2203      	movs	r2, #3
 8001014:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8001018:	e02e      	b.n	8001078 <teraRTOS_Update_SchedulerTable+0xc0>
			}
			if(Ptask->Priority < PnextTask->Priority)
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	791a      	ldrb	r2, [r3, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	791b      	ldrb	r3, [r3, #4]
 8001022:	429a      	cmp	r2, r3
 8001024:	d208      	bcs.n	8001038 <teraRTOS_Update_SchedulerTable+0x80>
			{
				FIFO_enqueue(&Ready_Queue, Ptask);
 8001026:	68b9      	ldr	r1, [r7, #8]
 8001028:	4815      	ldr	r0, [pc, #84]	; (8001080 <teraRTOS_Update_SchedulerTable+0xc8>)
 800102a:	f000 fb5d 	bl	80016e8 <FIFO_enqueue>
				Ptask->TaskState = Ready;
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2203      	movs	r2, #3
 8001032:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8001036:	e01f      	b.n	8001078 <teraRTOS_Update_SchedulerTable+0xc0>
			}
			else if( (Ptask->Priority) == (PnextTask->Priority) )
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	791a      	ldrb	r2, [r3, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	791b      	ldrb	r3, [r3, #4]
 8001040:	429a      	cmp	r2, r3
 8001042:	d108      	bne.n	8001056 <teraRTOS_Update_SchedulerTable+0x9e>
			{
				FIFO_enqueue(&Ready_Queue, Ptask);
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	480e      	ldr	r0, [pc, #56]	; (8001080 <teraRTOS_Update_SchedulerTable+0xc8>)
 8001048:	f000 fb4e 	bl	80016e8 <FIFO_enqueue>
				Ptask->TaskState = Ready;
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	2203      	movs	r2, #3
 8001050:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001054:	e005      	b.n	8001062 <teraRTOS_Update_SchedulerTable+0xaa>
			}
			else if(Ptask->Priority > PnextTask->Priority) // This condition not allowed to happen because of Bubble sorting
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	791a      	ldrb	r2, [r3, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	791b      	ldrb	r3, [r3, #4]
 800105e:	429a      	cmp	r2, r3
 8001060:	d809      	bhi.n	8001076 <teraRTOS_Update_SchedulerTable+0xbe>
			}
		}



		i++;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3301      	adds	r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
	while(i< OS_Control.ActiveTasks_number)
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <teraRTOS_Update_SchedulerTable+0xcc>)
 800106a:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	429a      	cmp	r2, r3
 8001072:	d8b4      	bhi.n	8000fde <teraRTOS_Update_SchedulerTable+0x26>
	}

}
 8001074:	e000      	b.n	8001078 <teraRTOS_Update_SchedulerTable+0xc0>
				break;
 8001076:	bf00      	nop
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000154 	.word	0x20000154
 8001084:	200002fc 	.word	0x200002fc

08001088 <Decide_WhatNext>:

//Handler Mode
void Decide_WhatNext(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0

	//if ready queue is empty && OS_Control.CurrentTask->TaskState != Suspended
	if(Ready_Queue.counter == 0 && OS_Control.CurrentTask->TaskState != Suspended)
 800108c:	4b24      	ldr	r3, [pc, #144]	; (8001120 <Decide_WhatNext+0x98>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d11a      	bne.n	80010ca <Decide_WhatNext+0x42>
 8001094:	4b23      	ldr	r3, [pc, #140]	; (8001124 <Decide_WhatNext+0x9c>)
 8001096:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800109a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d013      	beq.n	80010ca <Decide_WhatNext+0x42>
	{
		OS_Control.CurrentTask->TaskState = Running;
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <Decide_WhatNext+0x9c>)
 80010a4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80010a8:	2201      	movs	r2, #1
 80010aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		FIFO_enqueue(&Ready_Queue, OS_Control.CurrentTask);
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <Decide_WhatNext+0x9c>)
 80010b0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80010b4:	4619      	mov	r1, r3
 80010b6:	481a      	ldr	r0, [pc, #104]	; (8001120 <Decide_WhatNext+0x98>)
 80010b8:	f000 fb16 	bl	80016e8 <FIFO_enqueue>
		OS_Control.NextTask =  OS_Control.CurrentTask;
 80010bc:	4b19      	ldr	r3, [pc, #100]	; (8001124 <Decide_WhatNext+0x9c>)
 80010be:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80010c2:	4a18      	ldr	r2, [pc, #96]	; (8001124 <Decide_WhatNext+0x9c>)
 80010c4:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
			FIFO_enqueue(&Ready_Queue, OS_Control.CurrentTask);
			OS_Control.CurrentTask->TaskState = Ready;
		}
	}

}
 80010c8:	e027      	b.n	800111a <Decide_WhatNext+0x92>
		FIFO_dequeue(&Ready_Queue, &OS_Control.NextTask);
 80010ca:	4917      	ldr	r1, [pc, #92]	; (8001128 <Decide_WhatNext+0xa0>)
 80010cc:	4814      	ldr	r0, [pc, #80]	; (8001120 <Decide_WhatNext+0x98>)
 80010ce:	f000 fb4d 	bl	800176c <FIFO_dequeue>
		OS_Control.NextTask->TaskState = Running;
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <Decide_WhatNext+0x9c>)
 80010d4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if( (OS_Control.CurrentTask->Priority == OS_Control.NextTask->Priority ) && (OS_Control.CurrentTask->TaskState != Suspended) )
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <Decide_WhatNext+0x9c>)
 80010e0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80010e4:	791a      	ldrb	r2, [r3, #4]
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <Decide_WhatNext+0x9c>)
 80010e8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80010ec:	791b      	ldrb	r3, [r3, #4]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d113      	bne.n	800111a <Decide_WhatNext+0x92>
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <Decide_WhatNext+0x9c>)
 80010f4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80010f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00c      	beq.n	800111a <Decide_WhatNext+0x92>
			FIFO_enqueue(&Ready_Queue, OS_Control.CurrentTask);
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <Decide_WhatNext+0x9c>)
 8001102:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <Decide_WhatNext+0x98>)
 800110a:	f000 faed 	bl	80016e8 <FIFO_enqueue>
			OS_Control.CurrentTask->TaskState = Ready;
 800110e:	4b05      	ldr	r3, [pc, #20]	; (8001124 <Decide_WhatNext+0x9c>)
 8001110:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001114:	2203      	movs	r2, #3
 8001116:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000154 	.word	0x20000154
 8001124:	200002fc 	.word	0x200002fc
 8001128:	200004a0 	.word	0x200004a0

0800112c <OS_SVC_services>:

//To execute specific OS service
// Handler Mode
void OS_SVC_services(int * StackFramePointer)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	//OS_SVC_Set Stack -> R0 -> argument 0 = StackFramePointer
	//OS_SVC_Set Stack : R0,R1,R2,R3,R12,LR,PC,xPSR
	unsigned char SVC_Number;
	SVC_Number =  *((unsigned char*)( ( (unsigned char*)StackFramePointer[6] ) - 2 )) ;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3318      	adds	r3, #24
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	3b02      	subs	r3, #2
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	73fb      	strb	r3, [r7, #15]

	switch(SVC_Number)
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db20      	blt.n	8001188 <OS_SVC_services+0x5c>
 8001146:	2b01      	cmp	r3, #1
 8001148:	dd02      	ble.n	8001150 <OS_SVC_services+0x24>
 800114a:	2b02      	cmp	r3, #2
 800114c:	d017      	beq.n	800117e <OS_SVC_services+0x52>
		teraRTOS_Update_SchedulerTable();

		break;
	}

	return;
 800114e:	e01b      	b.n	8001188 <OS_SVC_services+0x5c>
		teraRTOS_Update_SchedulerTable();
 8001150:	f7ff ff32 	bl	8000fb8 <teraRTOS_Update_SchedulerTable>
		if(OS_Control.OS_Modes == OSrunning)
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <OS_SVC_services+0x64>)
 8001156:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 800115a:	2b01      	cmp	r3, #1
 800115c:	d112      	bne.n	8001184 <OS_SVC_services+0x58>
			if(strcmp(OS_Control.CurrentTask->TaskName, "idleTask") != 0)
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <OS_SVC_services+0x64>)
 8001160:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001164:	331c      	adds	r3, #28
 8001166:	490b      	ldr	r1, [pc, #44]	; (8001194 <OS_SVC_services+0x68>)
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f801 	bl	8000170 <strcmp>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d007      	beq.n	8001184 <OS_SVC_services+0x58>
				Decide_WhatNext();
 8001174:	f7ff ff88 	bl	8001088 <Decide_WhatNext>
				trigger_OS_PendSV();
 8001178:	f7ff fea8 	bl	8000ecc <trigger_OS_PendSV>
		break;
 800117c:	e002      	b.n	8001184 <OS_SVC_services+0x58>
		teraRTOS_Update_SchedulerTable();
 800117e:	f7ff ff1b 	bl	8000fb8 <teraRTOS_Update_SchedulerTable>
		break;
 8001182:	e000      	b.n	8001186 <OS_SVC_services+0x5a>
		break;
 8001184:	bf00      	nop
	return;
 8001186:	bf00      	nop
 8001188:	bf00      	nop
}
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200002fc 	.word	0x200002fc
 8001194:	08001894 	.word	0x08001894

08001198 <PendSV_Handler>:
	//=====================================
	//Save the Context of the Current Task
	//=====================================
	//Get the Current Task PSP from CPU register as CPU pushes xPSR,.....,R0

	OS_GET_PSP(OS_Control.CurrentTask->CurrentPSP);
 8001198:	4b6e      	ldr	r3, [pc, #440]	; (8001354 <PendSV_Handler+0x1bc>)
 800119a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800119e:	f3ef 8209 	mrs	r2, PSP
 80011a2:	619a      	str	r2, [r3, #24]

	//Using this CurrentPSP ( Pointer ) to store (R4 to R11)
	OS_Control.CurrentTask->CurrentPSP--;
 80011a4:	4b6b      	ldr	r3, [pc, #428]	; (8001354 <PendSV_Handler+0x1bc>)
 80011a6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80011aa:	699a      	ldr	r2, [r3, #24]
 80011ac:	3a04      	subs	r2, #4
 80011ae:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r4" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 80011b0:	4b68      	ldr	r3, [pc, #416]	; (8001354 <PendSV_Handler+0x1bc>)
 80011b2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4622      	mov	r2, r4
 80011ba:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->CurrentPSP--;
 80011bc:	4b65      	ldr	r3, [pc, #404]	; (8001354 <PendSV_Handler+0x1bc>)
 80011be:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80011c2:	699a      	ldr	r2, [r3, #24]
 80011c4:	3a04      	subs	r2, #4
 80011c6:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r5" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 80011c8:	4b62      	ldr	r3, [pc, #392]	; (8001354 <PendSV_Handler+0x1bc>)
 80011ca:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	462a      	mov	r2, r5
 80011d2:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->CurrentPSP--;
 80011d4:	4b5f      	ldr	r3, [pc, #380]	; (8001354 <PendSV_Handler+0x1bc>)
 80011d6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80011da:	699a      	ldr	r2, [r3, #24]
 80011dc:	3a04      	subs	r2, #4
 80011de:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r6" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 80011e0:	4b5c      	ldr	r3, [pc, #368]	; (8001354 <PendSV_Handler+0x1bc>)
 80011e2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4632      	mov	r2, r6
 80011ea:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->CurrentPSP--;
 80011ec:	4b59      	ldr	r3, [pc, #356]	; (8001354 <PendSV_Handler+0x1bc>)
 80011ee:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80011f2:	699a      	ldr	r2, [r3, #24]
 80011f4:	3a04      	subs	r2, #4
 80011f6:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r7" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 80011f8:	4b56      	ldr	r3, [pc, #344]	; (8001354 <PendSV_Handler+0x1bc>)
 80011fa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	463a      	mov	r2, r7
 8001202:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->CurrentPSP--;
 8001204:	4b53      	ldr	r3, [pc, #332]	; (8001354 <PendSV_Handler+0x1bc>)
 8001206:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800120a:	699a      	ldr	r2, [r3, #24]
 800120c:	3a04      	subs	r2, #4
 800120e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r8" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 8001210:	4b50      	ldr	r3, [pc, #320]	; (8001354 <PendSV_Handler+0x1bc>)
 8001212:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4642      	mov	r2, r8
 800121a:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->CurrentPSP--;
 800121c:	4b4d      	ldr	r3, [pc, #308]	; (8001354 <PendSV_Handler+0x1bc>)
 800121e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001222:	699a      	ldr	r2, [r3, #24]
 8001224:	3a04      	subs	r2, #4
 8001226:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r9" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 8001228:	4b4a      	ldr	r3, [pc, #296]	; (8001354 <PendSV_Handler+0x1bc>)
 800122a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	464a      	mov	r2, r9
 8001232:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->CurrentPSP--;
 8001234:	4b47      	ldr	r3, [pc, #284]	; (8001354 <PendSV_Handler+0x1bc>)
 8001236:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800123a:	699a      	ldr	r2, [r3, #24]
 800123c:	3a04      	subs	r2, #4
 800123e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r10" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 8001240:	4b44      	ldr	r3, [pc, #272]	; (8001354 <PendSV_Handler+0x1bc>)
 8001242:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4652      	mov	r2, sl
 800124a:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->CurrentPSP--;
 800124c:	4b41      	ldr	r3, [pc, #260]	; (8001354 <PendSV_Handler+0x1bc>)
 800124e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001252:	699a      	ldr	r2, [r3, #24]
 8001254:	3a04      	subs	r2, #4
 8001256:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r11" : "=r" (*(OS_Control.CurrentTask->CurrentPSP)) );
 8001258:	4b3e      	ldr	r3, [pc, #248]	; (8001354 <PendSV_Handler+0x1bc>)
 800125a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	465a      	mov	r2, fp
 8001262:	601a      	str	r2, [r3, #0]
	//Already saved in CurrentPSP

	//=====================================
	//Restore the Context of the Next task
	//=====================================
	if(OS_Control.NextTask != NULL){
 8001264:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <PendSV_Handler+0x1bc>)
 8001266:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800126a:	2b00      	cmp	r3, #0
 800126c:	d009      	beq.n	8001282 <PendSV_Handler+0xea>
		OS_Control.CurrentTask = OS_Control.NextTask;
 800126e:	4b39      	ldr	r3, [pc, #228]	; (8001354 <PendSV_Handler+0x1bc>)
 8001270:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001274:	4a37      	ldr	r2, [pc, #220]	; (8001354 <PendSV_Handler+0x1bc>)
 8001276:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_Control.NextTask = NULL;
 800127a:	4b36      	ldr	r3, [pc, #216]	; (8001354 <PendSV_Handler+0x1bc>)
 800127c:	2200      	movs	r2, #0
 800127e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}

	__asm volatile("mov R11,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 8001282:	4b34      	ldr	r3, [pc, #208]	; (8001354 <PendSV_Handler+0x1bc>)
 8001284:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	469b      	mov	fp, r3
	OS_Control.CurrentTask->CurrentPSP++;
 800128e:	4b31      	ldr	r3, [pc, #196]	; (8001354 <PendSV_Handler+0x1bc>)
 8001290:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001294:	699a      	ldr	r2, [r3, #24]
 8001296:	3204      	adds	r2, #4
 8001298:	619a      	str	r2, [r3, #24]
	__asm volatile("mov R10,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 800129a:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <PendSV_Handler+0x1bc>)
 800129c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	469a      	mov	sl, r3
	OS_Control.CurrentTask->CurrentPSP++;
 80012a6:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <PendSV_Handler+0x1bc>)
 80012a8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80012ac:	699a      	ldr	r2, [r3, #24]
 80012ae:	3204      	adds	r2, #4
 80012b0:	619a      	str	r2, [r3, #24]
	__asm volatile("mov R9,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 80012b2:	4b28      	ldr	r3, [pc, #160]	; (8001354 <PendSV_Handler+0x1bc>)
 80012b4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4699      	mov	r9, r3
	OS_Control.CurrentTask->CurrentPSP++;
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <PendSV_Handler+0x1bc>)
 80012c0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80012c4:	699a      	ldr	r2, [r3, #24]
 80012c6:	3204      	adds	r2, #4
 80012c8:	619a      	str	r2, [r3, #24]
	__asm volatile("mov R8,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <PendSV_Handler+0x1bc>)
 80012cc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4698      	mov	r8, r3
	OS_Control.CurrentTask->CurrentPSP++;
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <PendSV_Handler+0x1bc>)
 80012d8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80012dc:	699a      	ldr	r2, [r3, #24]
 80012de:	3204      	adds	r2, #4
 80012e0:	619a      	str	r2, [r3, #24]
	__asm volatile("mov R7,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <PendSV_Handler+0x1bc>)
 80012e4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	461f      	mov	r7, r3
	OS_Control.CurrentTask->CurrentPSP++;
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <PendSV_Handler+0x1bc>)
 80012f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80012f4:	699a      	ldr	r2, [r3, #24]
 80012f6:	3204      	adds	r2, #4
 80012f8:	619a      	str	r2, [r3, #24]
	__asm volatile("mov R6,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <PendSV_Handler+0x1bc>)
 80012fc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	461e      	mov	r6, r3
	OS_Control.CurrentTask->CurrentPSP++;
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <PendSV_Handler+0x1bc>)
 8001308:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800130c:	699a      	ldr	r2, [r3, #24]
 800130e:	3204      	adds	r2, #4
 8001310:	619a      	str	r2, [r3, #24]
	__asm volatile("mov R5,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <PendSV_Handler+0x1bc>)
 8001314:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	461d      	mov	r5, r3
	OS_Control.CurrentTask->CurrentPSP++;
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <PendSV_Handler+0x1bc>)
 8001320:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001324:	699a      	ldr	r2, [r3, #24]
 8001326:	3204      	adds	r2, #4
 8001328:	619a      	str	r2, [r3, #24]
	__asm volatile("mov R4,%0 " : : "r"( *(OS_Control.CurrentTask->CurrentPSP) ));
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <PendSV_Handler+0x1bc>)
 800132c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	461c      	mov	r4, r3
	OS_Control.CurrentTask->CurrentPSP++;
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <PendSV_Handler+0x1bc>)
 8001338:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800133c:	699a      	ldr	r2, [r3, #24]
 800133e:	3204      	adds	r2, #4
 8001340:	619a      	str	r2, [r3, #24]

	//Update PSP and Exit
	OS_SET_PSP(OS_Control.CurrentTask->CurrentPSP);
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <PendSV_Handler+0x1bc>)
 8001344:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	f383 8809 	msr	PSP, r3
	__asm volatile ("BX LR");
 800134e:	4770      	bx	lr



}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	200002fc 	.word	0x200002fc

08001358 <teraRTOS_CreateMSP>:


void teraRTOS_CreateMSP() {
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
	OS_Control._S_MSP =(uint32_t)&_estack ;
 800135c:	4a0b      	ldr	r2, [pc, #44]	; (800138c <teraRTOS_CreateMSP+0x34>)
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <teraRTOS_CreateMSP+0x38>)
 8001360:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP = OS_Control._S_MSP - MainStackSize;
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <teraRTOS_CreateMSP+0x38>)
 8001366:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800136a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800136e:	4a08      	ldr	r2, [pc, #32]	; (8001390 <teraRTOS_CreateMSP+0x38>)
 8001370:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	// Aligned 8 Bytes spaces between MSP and PSP
	OS_Control.Task_PSP_LOCATOR = OS_Control._E_MSP + 8 ;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <teraRTOS_CreateMSP+0x38>)
 8001376:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800137a:	3308      	adds	r3, #8
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <teraRTOS_CreateMSP+0x38>)
 800137e:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//  if ( _E_MSP < &_eheap ) --> " ERROR: EXCEEDED THE AVAILABLE STACK SIZE "


}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20002800 	.word	0x20002800
 8001390:	200002fc 	.word	0x200002fc

08001394 <idle_Task_fun>:
uint8_t idleTaskLED;
void idle_Task_fun(){
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

	while(1)
	{
		idleTaskLED ^= 1;
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <idle_Task_fun+0x18>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	f083 0301 	eor.w	r3, r3, #1
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b02      	ldr	r3, [pc, #8]	; (80013ac <idle_Task_fun+0x18>)
 80013a4:	701a      	strb	r2, [r3, #0]
		__asm("wfe");
 80013a6:	bf20      	wfe
		idleTaskLED ^= 1;
 80013a8:	e7f6      	b.n	8001398 <idle_Task_fun+0x4>
 80013aa:	bf00      	nop
 80013ac:	20000168 	.word	0x20000168

080013b0 <TERA_RTOS_init>:
	}

}
TERA_RTOS_ErrorType TERA_RTOS_init(void){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0

	TERA_RTOS_ErrorType RTOS_Error;
	RTOS_Error = NoError;
 80013b6:	2300      	movs	r3, #0
 80013b8:	71fb      	strb	r3, [r7, #7]
	//Update OS Mode ( OS -> suspended )
	OS_Control.OS_Modes = OSsuspended;
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <TERA_RTOS_init+0x5c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	// Specify the main stack for OS
	teraRTOS_CreateMSP();
 80013c2:	f7ff ffc9 	bl	8001358 <teraRTOS_CreateMSP>


	// Create OS ready Queue
	if ( FIFO_init(&Ready_Queue, READY_QUEUE_FIFO, 100) != FIFO_NO_ERROR)
 80013c6:	2264      	movs	r2, #100	; 0x64
 80013c8:	4911      	ldr	r1, [pc, #68]	; (8001410 <TERA_RTOS_init+0x60>)
 80013ca:	4812      	ldr	r0, [pc, #72]	; (8001414 <TERA_RTOS_init+0x64>)
 80013cc:	f000 f96a 	bl	80016a4 <FIFO_init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <TERA_RTOS_init+0x2a>
	{
		RTOS_Error = Ready_Queue_init_error;
 80013d6:	2301      	movs	r3, #1
 80013d8:	71fb      	strb	r3, [r7, #7]
	}


	// Configure idle Task
	strcpy (teraRTOS_idleTask.TaskName,"idleTask");
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <TERA_RTOS_init+0x68>)
 80013dc:	4a0f      	ldr	r2, [pc, #60]	; (800141c <TERA_RTOS_init+0x6c>)
 80013de:	ca07      	ldmia	r2, {r0, r1, r2}
 80013e0:	c303      	stmia	r3!, {r0, r1}
 80013e2:	701a      	strb	r2, [r3, #0]
	teraRTOS_idleTask.Priority = 255;
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <TERA_RTOS_init+0x70>)
 80013e6:	22ff      	movs	r2, #255	; 0xff
 80013e8:	711a      	strb	r2, [r3, #4]
	teraRTOS_idleTask.TaskEntry_Ptr = idle_Task_fun;
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <TERA_RTOS_init+0x70>)
 80013ec:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <TERA_RTOS_init+0x74>)
 80013ee:	609a      	str	r2, [r3, #8]
	teraRTOS_idleTask.Stack_Size = 300;
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <TERA_RTOS_init+0x70>)
 80013f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013f6:	601a      	str	r2, [r3, #0]

	RTOS_Error = teraRTOS_CreateTask(&teraRTOS_idleTask);
 80013f8:	4809      	ldr	r0, [pc, #36]	; (8001420 <TERA_RTOS_init+0x70>)
 80013fa:	f000 f853 	bl	80014a4 <teraRTOS_CreateTask>
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]



	return RTOS_Error;
 8001402:	79fb      	ldrb	r3, [r7, #7]

}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200002fc 	.word	0x200002fc
 8001410:	2000016c 	.word	0x2000016c
 8001414:	20000154 	.word	0x20000154
 8001418:	2000012c 	.word	0x2000012c
 800141c:	08001894 	.word	0x08001894
 8001420:	20000110 	.word	0x20000110
 8001424:	08001395 	.word	0x08001395

08001428 <teraRTOS_Create_TaskStack>:


void teraRTOS_Create_TaskStack(Task_Creation * create_stack){
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	 * R9
	 * R10
//New SP --> * R11
	 */

	create_stack->CurrentPSP =(uint32_t *) create_stack->_S_PSP_Task;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	461a      	mov	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	619a      	str	r2, [r3, #24]

	create_stack->CurrentPSP--;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	1f1a      	subs	r2, r3, #4
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	619a      	str	r2, [r3, #24]
	*(create_stack->CurrentPSP)=0x01000000;		//Dummy xPSR with T=1 to avoid Bus fault
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800144c:	601a      	str	r2, [r3, #0]

	create_stack->CurrentPSP--;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	1f1a      	subs	r2, r3, #4
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	619a      	str	r2, [r3, #24]
	*(create_stack->CurrentPSP)=(unsigned int)create_stack->TaskEntry_Ptr;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	601a      	str	r2, [r3, #0]

	create_stack->CurrentPSP--;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	1f1a      	subs	r2, r3, #4
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	619a      	str	r2, [r3, #24]
	*(create_stack->CurrentPSP)=0xFFFFFFFD; // LR = 0xFFFFFFFD (EXC_RETURN) --> return to Thread with PSP
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f06f 0202 	mvn.w	r2, #2
 8001474:	601a      	str	r2, [r3, #0]

	int i;
	for(i=0; i<13; i++)
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	e00b      	b.n	8001494 <teraRTOS_Create_TaskStack+0x6c>
	{
		create_stack->CurrentPSP--;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	1f1a      	subs	r2, r3, #4
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	619a      	str	r2, [r3, #24]
		*(create_stack->CurrentPSP)=0;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
	for(i=0; i<13; i++)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	3301      	adds	r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b0c      	cmp	r3, #12
 8001498:	ddf0      	ble.n	800147c <teraRTOS_Create_TaskStack+0x54>
	}




}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <teraRTOS_CreateTask>:


TERA_RTOS_ErrorType teraRTOS_CreateTask(Task_Creation* create){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]


	TERA_RTOS_ErrorType RTOS_Error = NoError;
 80014ac:	2300      	movs	r3, #0
 80014ae:	73fb      	strb	r3, [r7, #15]

	//Create its own PSP stack

	create->_S_PSP_Task = OS_Control.Task_PSP_LOCATOR;
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <teraRTOS_CreateTask+0x74>)
 80014b2:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	611a      	str	r2, [r3, #16]
	create->_E_PSP_Task = create->_S_PSP_Task - create->Stack_Size;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691a      	ldr	r2, [r3, #16]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	1ad2      	subs	r2, r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	615a      	str	r2, [r3, #20]

	//Check task stack size exceeded PSP stack or not

	if( create->_E_PSP_Task < (uint32_t)&(_eheap) )
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	4a13      	ldr	r2, [pc, #76]	; (800151c <teraRTOS_CreateTask+0x78>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d201      	bcs.n	80014d6 <teraRTOS_CreateTask+0x32>
	{
		return Task_exceeded_StackSize;
 80014d2:	2302      	movs	r3, #2
 80014d4:	e01b      	b.n	800150e <teraRTOS_CreateTask+0x6a>
	}

	//Aligned 8 bytes space between task PSP and other

	OS_Control.Task_PSP_LOCATOR = ( create->_E_PSP_Task - 8 );
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	3b08      	subs	r3, #8
 80014dc:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <teraRTOS_CreateTask+0x74>)
 80014de:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198


	//Initialize PSP task stack

	teraRTOS_Create_TaskStack(create);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffa0 	bl	8001428 <teraRTOS_Create_TaskStack>


	OS_Control.OS_Tasks[OS_Control.ActiveTasks_number] = create;
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <teraRTOS_CreateTask+0x74>)
 80014ea:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80014ee:	490a      	ldr	r1, [pc, #40]	; (8001518 <teraRTOS_CreateTask+0x74>)
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.ActiveTasks_number++;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <teraRTOS_CreateTask+0x74>)
 80014f8:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80014fc:	3301      	adds	r3, #1
 80014fe:	4a06      	ldr	r2, [pc, #24]	; (8001518 <teraRTOS_CreateTask+0x74>)
 8001500:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
	// Task state update --> Suspended

	create->TaskState = Suspended;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a



	return RTOS_Error;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200002fc 	.word	0x200002fc
 800151c:	20000aa8 	.word	0x20000aa8

08001520 <teraRTOS_OS_SVC_Set>:
//Thread Mode
void teraRTOS_OS_SVC_Set(SVC_ID id){
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]

	switch(id)
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d006      	beq.n	800153e <teraRTOS_OS_SVC_Set+0x1e>
 8001530:	2b02      	cmp	r3, #2
 8001532:	d006      	beq.n	8001542 <teraRTOS_OS_SVC_Set+0x22>
 8001534:	2b00      	cmp	r3, #0
 8001536:	d000      	beq.n	800153a <teraRTOS_OS_SVC_Set+0x1a>

		break;

	}

}
 8001538:	e005      	b.n	8001546 <teraRTOS_OS_SVC_Set+0x26>
		__asm("SVC #0x0");
 800153a:	df00      	svc	0
		break;
 800153c:	e003      	b.n	8001546 <teraRTOS_OS_SVC_Set+0x26>
		__asm("SVC #0x1");
 800153e:	df01      	svc	1
		break;
 8001540:	e001      	b.n	8001546 <teraRTOS_OS_SVC_Set+0x26>
		__asm("SVC #0x2");
 8001542:	df02      	svc	2
		break;
 8001544:	bf00      	nop
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <teraRTOS_ActivateTask>:


TERA_RTOS_ErrorType teraRTOS_ActivateTask(Task_Creation * activate){
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

	TERA_RTOS_ErrorType error;
	error = NoError;
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]

	activate->TaskState = Waiting;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2202      	movs	r2, #2
 8001560:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	teraRTOS_OS_SVC_Set(SVC_ActivateTask);
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff ffdb 	bl	8001520 <teraRTOS_OS_SVC_Set>



	return error;
 800156a:	7bfb      	ldrb	r3, [r7, #15]

}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <teraRTOS_TerminateTask>:
TERA_RTOS_ErrorType teraRTOS_TerminateTask(Task_Creation * terminate){
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

	TERA_RTOS_ErrorType error;
	error = NoError;
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]

	terminate->TaskState = Suspended;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	teraRTOS_OS_SVC_Set(SVC_TerminateTask);
 8001588:	2001      	movs	r0, #1
 800158a:	f7ff ffc9 	bl	8001520 <teraRTOS_OS_SVC_Set>




	return error;
 800158e:	7bfb      	ldrb	r3, [r7, #15]



}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <teraRTOS_TaskWait>:


void teraRTOS_TaskWait(uint32_t TicksNum,Task_Creation * task_w8)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]

	task_w8->Task_WaitingTime.Blocking = Block_Enable;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	task_w8->Task_WaitingTime.Ticks_Number = TicksNum;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	641a      	str	r2, [r3, #64]	; 0x40
	//Task should be suspended
	//Then should be terminated
	teraRTOS_TerminateTask(task_w8);
 80015b0:	6838      	ldr	r0, [r7, #0]
 80015b2:	f7ff ffdf 	bl	8001574 <teraRTOS_TerminateTask>

}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <teraRTOS_START>:
void teraRTOS_START(){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0

	OS_Control.OS_Modes = OSrunning;
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <teraRTOS_START+0x50>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//Set default Current Task == idleTask
	OS_Control.CurrentTask = &teraRTOS_idleTask;
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <teraRTOS_START+0x50>)
 80015ce:	4a11      	ldr	r2, [pc, #68]	; (8001614 <teraRTOS_START+0x54>)
 80015d0:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	//Activate idle task
	teraRTOS_ActivateTask(&teraRTOS_idleTask);
 80015d4:	480f      	ldr	r0, [pc, #60]	; (8001614 <teraRTOS_START+0x54>)
 80015d6:	f7ff ffbb 	bl	8001550 <teraRTOS_ActivateTask>
	//Start ticker
	Start_Ticker(); // Every 1ms
 80015da:	f7ff fc85 	bl	8000ee8 <Start_Ticker>

	OS_SET_PSP(OS_Control.CurrentTask->CurrentPSP);
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <teraRTOS_START+0x50>)
 80015e0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	f383 8809 	msr	PSP, r3

	//Switch from MSP to PSP
	OS_SWITCH_SP_to_PSP;
 80015ea:	f3ef 8014 	mrs	r0, CONTROL
 80015ee:	f04f 0102 	mov.w	r1, #2
 80015f2:	ea40 0001 	orr.w	r0, r0, r1
 80015f6:	f380 8814 	msr	CONTROL, r0

	Switch_CPU_AccessLevel_Unprivilege;
 80015fa:	f3ef 8314 	mrs	r3, CONTROL
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	f383 8814 	msr	CONTROL, r3

	teraRTOS_idleTask.TaskEntry_Ptr();
 8001606:	4b03      	ldr	r3, [pc, #12]	; (8001614 <teraRTOS_START+0x54>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	4798      	blx	r3


}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200002fc 	.word	0x200002fc
 8001614:	20000110 	.word	0x20000110

08001618 <teraRTOS_Update_TaskWaitingTime>:

void teraRTOS_Update_TaskWaitingTime()
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	int i=0;
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
	for(i=0; i<OS_Control.ActiveTasks_number; i++)
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	e031      	b.n	800168c <teraRTOS_Update_TaskWaitingTime+0x74>
	{

		if(OS_Control.OS_Tasks[i]->TaskState == Suspended)
 8001628:	4a1d      	ldr	r2, [pc, #116]	; (80016a0 <teraRTOS_Update_TaskWaitingTime+0x88>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001630:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001634:	2b00      	cmp	r3, #0
 8001636:	d126      	bne.n	8001686 <teraRTOS_Update_TaskWaitingTime+0x6e>
		{
			if(OS_Control.OS_Tasks[i]->Task_WaitingTime.Blocking == Block_Enable)
 8001638:	4a19      	ldr	r2, [pc, #100]	; (80016a0 <teraRTOS_Update_TaskWaitingTime+0x88>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001644:	2b00      	cmp	r3, #0
 8001646:	d11e      	bne.n	8001686 <teraRTOS_Update_TaskWaitingTime+0x6e>
			{
				OS_Control.OS_Tasks[i]->Task_WaitingTime.Ticks_Number--;
 8001648:	4a15      	ldr	r2, [pc, #84]	; (80016a0 <teraRTOS_Update_TaskWaitingTime+0x88>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001652:	3a01      	subs	r2, #1
 8001654:	641a      	str	r2, [r3, #64]	; 0x40
				if(OS_Control.OS_Tasks[i]->Task_WaitingTime.Ticks_Number == 0)
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <teraRTOS_Update_TaskWaitingTime+0x88>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	2b00      	cmp	r3, #0
 8001662:	d110      	bne.n	8001686 <teraRTOS_Update_TaskWaitingTime+0x6e>
				{
					OS_Control.OS_Tasks[i]->Task_WaitingTime.Blocking = Block_Disable;
 8001664:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <teraRTOS_Update_TaskWaitingTime+0x88>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					OS_Control.OS_Tasks[i]->TaskState = Waiting;
 8001672:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <teraRTOS_Update_TaskWaitingTime+0x88>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167a:	2202      	movs	r2, #2
 800167c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
					teraRTOS_OS_SVC_Set(SVC_WaitingTask);
 8001680:	2002      	movs	r0, #2
 8001682:	f7ff ff4d 	bl	8001520 <teraRTOS_OS_SVC_Set>
	for(i=0; i<OS_Control.ActiveTasks_number; i++)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3301      	adds	r3, #1
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <teraRTOS_Update_TaskWaitingTime+0x88>)
 800168e:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	429a      	cmp	r2, r3
 8001696:	d8c7      	bhi.n	8001628 <teraRTOS_Update_TaskWaitingTime+0x10>
			}

		}
	}

}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200002fc 	.word	0x200002fc

080016a4 <FIFO_init>:
 */


#include "TERA_RTOS_FIFO.h"
/* *********************************** */
Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type * buff , unsigned int length){
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]

	if(!buff )
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <FIFO_init+0x16>
		return FIFO_NULL;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e011      	b.n	80016de <FIFO_init+0x3a>

	fifo->base = buff ;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80016dc:	2300      	movs	r3, #0

}
 80016de:	4618      	mov	r0, r3
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <FIFO_enqueue>:

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <FIFO_enqueue+0x1a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 8001702:	2303      	movs	r3, #3
 8001704:	e02d      	b.n	8001762 <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	429a      	cmp	r2, r3
 8001710:	d107      	bne.n	8001722 <FIFO_enqueue+0x3a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	429a      	cmp	r2, r3
 800171c:	d101      	bne.n	8001722 <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 800171e:	2301      	movs	r3, #1
 8001720:	e01f      	b.n	8001762 <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	68d2      	ldr	r2, [r2, #12]
 800173c:	4611      	mov	r1, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6912      	ldr	r2, [r2, #16]
 8001742:	0092      	lsls	r2, r2, #2
 8001744:	440a      	add	r2, r1
 8001746:	3a04      	subs	r2, #4
 8001748:	4293      	cmp	r3, r2
 800174a:	d104      	bne.n	8001756 <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	e004      	b.n	8001760 <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	1d1a      	adds	r2, r3, #4
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 8001760:	2300      	movs	r3, #0


}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <FIFO_dequeue>:

/* *********************************** */

Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type * item){
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <FIFO_dequeue+0x1a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 8001786:	2303      	movs	r3, #3
 8001788:	e028      	b.n	80017dc <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	429a      	cmp	r2, r3
 8001794:	d101      	bne.n	800179a <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 8001796:	2302      	movs	r3, #2
 8001798:	e020      	b.n	80017dc <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	1e5a      	subs	r2, r3, #1
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	601a      	str	r2, [r3, #0]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68d2      	ldr	r2, [r2, #12]
 80017b6:	4611      	mov	r1, r2
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6912      	ldr	r2, [r2, #16]
 80017bc:	0092      	lsls	r2, r2, #2
 80017be:	440a      	add	r2, r1
 80017c0:	3a04      	subs	r2, #4
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d104      	bne.n	80017d0 <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	e004      	b.n	80017da <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	1d1a      	adds	r2, r3, #4
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
	...

080017e8 <__libc_init_array>:
 80017e8:	b570      	push	{r4, r5, r6, lr}
 80017ea:	2500      	movs	r5, #0
 80017ec:	4e0c      	ldr	r6, [pc, #48]	; (8001820 <__libc_init_array+0x38>)
 80017ee:	4c0d      	ldr	r4, [pc, #52]	; (8001824 <__libc_init_array+0x3c>)
 80017f0:	1ba4      	subs	r4, r4, r6
 80017f2:	10a4      	asrs	r4, r4, #2
 80017f4:	42a5      	cmp	r5, r4
 80017f6:	d109      	bne.n	800180c <__libc_init_array+0x24>
 80017f8:	f000 f81a 	bl	8001830 <_init>
 80017fc:	2500      	movs	r5, #0
 80017fe:	4e0a      	ldr	r6, [pc, #40]	; (8001828 <__libc_init_array+0x40>)
 8001800:	4c0a      	ldr	r4, [pc, #40]	; (800182c <__libc_init_array+0x44>)
 8001802:	1ba4      	subs	r4, r4, r6
 8001804:	10a4      	asrs	r4, r4, #2
 8001806:	42a5      	cmp	r5, r4
 8001808:	d105      	bne.n	8001816 <__libc_init_array+0x2e>
 800180a:	bd70      	pop	{r4, r5, r6, pc}
 800180c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001810:	4798      	blx	r3
 8001812:	3501      	adds	r5, #1
 8001814:	e7ee      	b.n	80017f4 <__libc_init_array+0xc>
 8001816:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800181a:	4798      	blx	r3
 800181c:	3501      	adds	r5, #1
 800181e:	e7f2      	b.n	8001806 <__libc_init_array+0x1e>
 8001820:	080018a0 	.word	0x080018a0
 8001824:	080018a0 	.word	0x080018a0
 8001828:	080018a0 	.word	0x080018a0
 800182c:	080018a4 	.word	0x080018a4

08001830 <_init>:
 8001830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001832:	bf00      	nop
 8001834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001836:	bc08      	pop	{r3}
 8001838:	469e      	mov	lr, r3
 800183a:	4770      	bx	lr

0800183c <_fini>:
 800183c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800183e:	bf00      	nop
 8001840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001842:	bc08      	pop	{r3}
 8001844:	469e      	mov	lr, r3
 8001846:	4770      	bx	lr
